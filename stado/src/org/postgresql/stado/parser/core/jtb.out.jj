/* Generated by JTB 1.4.4 */


options
{
  IGNORE_CASE = true;
  STATIC = false;
  UNICODE_INPUT = true;
  CHOICE_AMBIGUITY_CHECK = 1;
  CACHE_TOKENS = true;
}

PARSER_BEGIN(CSQLParser)
package org.postgresql.stado.parser.core;

import java.io.PrintStream;
import org.postgresql.stado.parser.core.syntaxtree.*;


public class CSQLParser {

  public static void main(String[] args) throws ParseException, TokenMgrError{
    CSQLParser parser = new CSQLParser(System.in);
    process rootnode = parser.process(System.out);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(CSQLParser)

SKIP :
{
  " "
| "\n"
| "\r"
| "\t"
}

SKIP :
{
  < COMMENT_LINE : "--" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
}

SKIP :
{
  < COMMENT_BLOCK : "/*" ( ~["*"] )* "*" ( "*"| ( ~["*", "/"] ( ~["*"] )* "*" ) )* "/" >
}

TOKEN :
{
  < NOT_BITWISE_ : "~" >
| < LESS_ : "<" >
| < EQUALS_ : "=" >
| < GREATER_ : ">" >
| < OR_BITWISE_ : "|" >
| < MINUS_ : "-" >
| < SEMICOLON_ : ";" >
| < FACTORIAL_ : "!" >
| < DIVIDE_ : "/" >
| < QUOTE : "\"" >
| < PARENTHESIS_START_ : "(" >
| < PARENTHESIS_CLOSE_ : ")" >
| < ABSOLUTE_ : "@" >
| < STAR_ : "*" >
| < AND_BITWISE_ : "&" >
| < XOR_BITWISE_ : "#" >
| < MODULO_ : "%" >
| < PLUS_ : "+" >
| < GIS_SAME_ : "~=" >
| < REGEX_MATCHES_CASE_INSTV_ : "~*" >
| < SHIFT_LEFT_BITWISE_ : "<<" >
| < LESS_EQUALS_ : "<=" >
| < NOT_EQUALS_2_ : "<>" >
| < GREATER_EQUALS_ : ">=" >
| < SHIFT_RIGHT_BITWISE_ : ">>" >
| < CONCAT_ : "||" >
| < SQUARE_ROOT_ : "|/" >
| < REGEX_NOT_MATCHES_ : "!~" >
| < NOT_EQUALS_ : "!=" >
| < FACTORIAL_PREFIX_ : "!!" >
| < GIS_OVERLAPS_LEFT_ : "&<" >
| < GIS_OVERLAPS_RIGHT_ : "&>" >
| < GIS_OVERLAPS_ : "&&" >
| < AS_ : "AS" >
| < IN_ : "IN" >
| < IS_ : "IS" >
| < NO_ : "NO" >
| < ON_ : "ON" >
| < OR_ : "OR" >
| < TO_ : "TO" >
| < CONTAINED_WITHIN_OR_EQUALS_ : "<<=" >
| < GIS_STRICT_BELOW_ : "<<|" >
| < CONTAINS_OR_EQUALS_ : ">>=" >
| < GIS_STRICT_ABOVE_ : "|>>" >
| < CUBE_ROOT_ : "||/" >
| < GIS_OVERLAPS_ABOVE_ : "|&>" >
| < REGEX_NOT_MATCHES_CASE_INSTV_ : "!~*" >
| < LEFTOUTER_ : "(+)" >
| < GIS_OVERLAPS_BELOW_ : "&<|" >
| < ADD_ : "ADD" >
| < ALL_ : "ALL" >
| < AND_ : "AND" >
| < ANY_ : "ANY" >
| < ASC_ : "ASC" >
| < AVERAGE_ : "AVG" >
| < BIT_ : "BIT" >
| < CSV_ : "CSV" >
| < DAY_ : "DAY" >
| < DBA_ : "DBA" >
| < DEC_ : "DEC" >
| < END_ : "END" >
| < FOR_ : "FOR" >
| < INT_ : "INT" >
| < MAX_ : "MAX" >
| < MIN_ : "MIN" >
| < NOT_ : "NOT" >
| < RAW_ : "RAW" >
| < SET_ : "SET" >
| < SUM_ : "SUM" >
| < BLOB_ : "BLOB" >
| < BOTH : "BOTH" >
| < BYTE_ : "BYTE" >
| < CASE_ : "CASE" >
| < CAST_ : "CAST" >
| < CHAR_ : "CHAR" >
| < CIDR_ : "CIDR" >
| < CLOB_ : "CLOB" >
| < COPY_ : "COPY" >
| < CORR_ : "CORR" >
| < DATE_ : "DATE" >
| < DESC_ : "DESC" >
| < DROP_ : "DROP" >
| < ELSE_ : "ELSE" >
| < FROM_ : "FROM" >
| < FULL_ : "FULL" >
| < HOUR_ : "HOUR" >
| < INET_ : "INET" >
| < INT2_ : "INT2" >
| < INT4_ : "INT4" >
| < INT8_ : "INT8" >
| < INTO_ : "INTO" >
| < JOIN_ : "JOIN" >
| < KILL_ : "KILL" >
| < LEFT_ : "LEFT" >
| < LIKE_ : "LIKE" >
| < LONG_ : "LONG" >
| < NODE_ : "NODE" >
| < NULL_ : "NULL" >
| < OIDS_ : "OIDS" >
| < PORT_ : "PORT" >
| < REAL_ : "REAL" >
| < SHOW_ : "SHOW" >
| < SOME_ : "SOME" >
| < TEMP_ : "TEMP" >
| < TEXT_ : "TEXT" >
| < THEN_ : "THEN" >
| < TIME_ : "TIME" >
| < TRAN_ : "TRAN" >
| < TRIM_ : "TRIM" >
| < TRUE_ : "TRUE" >
| < TYPE_ : "TYPE" >
| < USER_ : "USER" >
| < VIEW_ : "VIEW" >
| < WEEK_ : "WEEK" >
| < WHEN_ : "WHEN" >
| < WITH_ : "WITH" >
| < WORK_ : "WORK" >
| < YEAR_ : "YEAR" >
| < AFTER_ : "AFTER" >
| < ALTER_ : "ALTER" >
| < BEGIN_ : "BEGIN" >
| < BOX2D_ : "BOX2D" >
| < BOX3D_ : "BOX3D" >
| < BYTEA_ : "BYTEA" >
| < CHECK_ : "CHECK" >
| < CLOSE_ : "CLOSE" >
| < COUNT_ : "COUNT" >
| < CROSS_ : "CROSS" >
| < EVERY_ : "EVERY" >
| < FALSE_ : "FALSE" >
| < FETCH_ : "FETCH" >
| < FIRST_ : "FIRST" >
| < FIXED_ : "FIXED" >
| < FLOAT_ : "FLOAT" >
| < FORCE_ : "FORCE" >
| < GRANT_ : "GRANT" >
| < ILIKE_ : "ILIKE" >
| < IMAGE_ : "IMAGE" >
| < INDEX_ : "INDEX" >
| < INNER_ : "INNER" >
| < LIMIT_ : "LIMIT" >
| < LOCAL_ : "LOCAL" >
| < MONEY_ : "MONEY" >
| < MONTH_ : "MONTH" >
| < NCHAR_ : "NCHAR" >
| < NODES_ : "NODES" >
| < OUTER_ : "OUTER" >
| < OWNER_ : "OWNER" >
| < QUOTE_STRING_ : "QUOTE" >
| < RIGHT_ : "RIGHT" >
| < STDIN_ : "STDIN" >
| < TABLE_ : "TABLE" >
| < TEMPDOT_ : "TEMP." >
| < UNION_ : "UNION" >
| < USING_ : "USING" >
| < WHERE_ : "WHERE" >
| < BIGINT_ : "BIGINT" >
| < BINARY_ : "BINARY" >
| < BIT_OR_ : "BIT_OR" >
| < COLUMN_ : "COLUMN" >
| < COMMIT_ : "COMMIT" >
| < CREATE_ : "CREATE" >
| < CURSOR_ : "CURSOR" >
| < DELETE_ : "DELETE" >
| < DIRECT_ : "DIRECT" >
| < ESCAPE_ : "ESCAPE" >
| < EXISTS_ : "EXISTS" >
| < FLOAT4_ : "FLOAT4" >
| < FLOAT8_ : "FLOAT8" >
| < FREEZE_ : "FREEZE" >
| < GLOBAL_ : "GLOBAL" >
| < HAVING_ : "HAVING" >
| < INSERT_ : "INSERT" >
| < MANUAL_ : "MANUAL" >
| < MINUTE_ : "MINUTE" >
| < MODIFY_ : "MODIFY" >
| < NULLIF_ : "NULLIF" >
| < NUMBER_ : "NUMBER" >
| < OFFSET_ : "OFFSET" >
| < PARENT_ : "PARENT" >
| < PUBLIC_ : "PUBLIC" >
| < RENAME_ : "RENAME" >
| < REVOKE_ : "REVOKE" >
| < SECOND_ : "SECOND" >
| < SELECT_ : "SELECT" >
| < SERIAL_ : "SERIAL" >
| < STDDEV_ : "STDDEV" >
| < STDOUT_ : "STDOUT" >
| < UNIQUE_ : "UNIQUE" >
| < UPDATE_ : "UPDATE" >
| < VACUUM_ : "VACUUM" >
| < VARBIT_ : "VARBIT" >
| < ANALYZE_ : "ANALYZE" >
| < BETWEEN_ : "BETWEEN" >
| < BIT_AND_ : "BIT_AND" >
| < BOOL_OR_ : "BOOL_OR" >
| < CLUSTER_ : "CLUSTER" >
| < CONVERT_ : "CONVERT" >
| < DECIMAL_ : "DECIMAL" >
| < DECLARE_ : "DECLARE" >
| < DEFAULT_ : "DEFAULT" >
| < EXPLAIN_ : "EXPLAIN" >
| < EXTRACT_ : "EXTRACT" >
| < INHERIT_ : "INHERIT" >
| < INTEGER_ : "INTEGER" >
| < LEADING : "LEADING" >
| < MACADDR_ : "MACADDR" >
| < NATURAL_ : "NATURAL" >
| < NUMERIC_ : "NUMERIC" >
| < OVERLAY_ : "OVERLAY" >
| < PLACING_ : "PLACING" >
| < PREPARE_ : "PREPARE" >
| < PUBLICDOT_ : "PUBLIC." >
| < QUARTER_ : "QUARTER" >
| < REGR_R2_ : "REGR_R2" >
| < REPLACE_ : "REPLACE" >
| < SPATIAL_ : "SPATIAL" >
| < STORAGE_ : "STORAGE" >
| < TINYINT_ : "TINYINT" >
| < VARCHAR_ : "VARCHAR" >
| < VAR_POP_ : "VAR_POP" >
| < VARYING_ : "VARYING" >
| < VERBOSE_ : "VERBOSE" >
| < VERSION_ : "VERSION" >
| < ADD_NODE_ : "ADD NODE" >
| < ASBINARY_ : "ASBINARY" >
| < BOOL_AND_ : "BOOL_AND" >
| < COALESCE_ : "COALESCE" >
| < DATABASE_ : "DATABASE" >
| < DATETIME_ : "DATETIME" >
| < DESCRIBE_ : "DESCRIBE" >
| < DISTINCT_ : "DISTINCT" >
| < GEOMETRY_ : "GEOMETRY" >
| < INHERITS_ : "INHERITS" >
| < INTERVAL_ : "INTERVAL" >
| < LOCATION_ : "LOCATION" >
| < LONG_RAW_ : "LONG RAW" >
| < LONGTEXT_ : "LONGTEXT" >
| < LVARCHAR_ : "LVARCHAR" >
| < NATIONAL_ : "NATIONAL" >
| < OVERLAPS_ : "OVERLAPS" >
| < PASSWORD_ : "PASSWORD" >
| < REGCLASS_ : "REGCLASS" >
| < REGR_SXX_ : "REGR_SXX" >
| < REGR_SXY_ : "REGR_SXY" >
| < REGR_SYY_ : "REGR_SYY" >
| < RESOURCE_ : "RESOURCE" >
| < ROLLBACK_ : "ROLLBACK" >
| < SHUT_DOWN_ : "SHUTDOWN" >
| < SMALLINT_ : "SMALLINT" >
| < STANDARD_ : "STANDARD" >
| < TINYTEXT_ : "TINYTEXT" >
| < TRAILING : "TRAILING" >
| < TRUNCATE_ : "TRUNCATE" >
| < UNLISTEN_ : "UNLISTEN" >
| < UNSIGNED_ : "UNSIGNED" >
| < VARCHAR2_ : "VARCHAR2" >
| < VARIANCE_ : "VARIANCE" >
| < VAR_SAMP_ : "VAR_SAMP" >
| < ZEROFILL_ : "ZEROFILL" >
| < BIGSERIAL_ : "BIGSERIAL" >
| < CHARACHTER_ : "CHARACTER" >
| < COVAR_POP_ : "COVAR_POP" >
| < DELIMITER_ : "DELIMITER" >
| < DROP_NODE_ : "DROP NODE" >
| < QPUBLICDOT_ : "\"PUBLIC\"." >
| < READ_ONLY_ : "READ_ONLY" >
| < REGR_AVGX_ : "REGR_AVGX" >
| < REGR_AVGY_ : "REGR_AVGY" >
| < SUBSTRING_ : "SUBSTRING" >
| < TEMPORARY_ : "TEMPORARY" >
| < TIMESTAMP_ : "TIMESTAMP" >
| < VARBINARY_ : "VARBINARY" >
| < BIGINTEGER_ : "BIGINTEGER" >
| < BITVARYING_ : "BITVARYING" >
| < CONSTRAINT_ : "CONSTRAINT" >
| < COVAR_SAMP_ : "COVAR_SAMP" >
| < DEALLOCATE_ : "DEALLOCATE" >
| < MEDIUMTEXT_ : "MEDIUMTEXT" >
| < READ_WRITE_ : "READ_WRITE" >
| < REFERENCES_ : "REFERENCES" >
| < REGR_COUNT_ : "REGR_COUNT" >
| < REGR_SLOPE_ : "REGR_SLOPE" >
| < REPLICATED_ : "REPLICATED" >
| < SMALLFLOAT_ : "SMALLFLOAT" >
| < SMALLMONEY_ : "SMALLMONEY" >
| < STATISTICS_ : "STATISTICS" >
| < STDDEV_POP_ : "STDDEV_POP" >
| < TABLESPACE_ : "TABLESPACE" >
| < BOX3DEXTENT_ : "BOX3DEXTENT" >
| < PERIMETER2D_ : "PERIMETER2D" >
| < PERIMETER3D_ : "PERIMETER3D" >
| < STDDEV_SAMP_ : "STDDEV_SAMP" >
| < TRANSACTION_ : "TRANSACTION" >
| < CURRENTDATE_ : "CURRENT_DATE" >
| < CURRENT_TIME_ : "CURRENT_TIME" >
| < CURRENT_USER_ : "CURRENT_USER" >
| < LONG_VARCHAR_ : "LONG VARCHAR" >
| < SERIALIZABLE_ : "SERIALIZABLE" >
| < VARIANCE_POP_ : "VARIANCE_POP" >
| < SAMLLDATETIME_ : "SMALLDATETIME" >
| < VARIANCE_SAMP_ : "VARIANCE_SAMP" >
| < CURRENT_SCHEMA_ : "CURRENT_SCHEMA" >
| < REGR_INTERCEPT_ : "REGR_INTERCEPT" >
| < CLOCK_TIMESTAMP_ : "CLOCK_TIMESTAMP" >
| < CURRENT_DATABASE_ : "CURRENT_DATABASE" >
| < ADDGEOMETRYCOLUMN_ : "ADDGEOMETRYCOLUMN" >
| < CURRENT_TIMESTAMP_ : "CURRENT_TIMESTAMP" >
| < STATEMENT_TIMESTAMP_ : "STATEMENT_TIMESTAMP" >
| < TRANSACTION_TIMESTAMP_ : "TRANSACTION_TIMESTAMP" >
| < ONLY_ : "ONLY" >
}

TOKEN :
{
  < UNARY_SIGN_ : ( <PLUS_>| <MINUS_> ) >
| < ORDER_BY_ : "ORDER" ( " " )+ "BY" >
| < UPDATE_STAT_ : "UPDATE" ( " " )+ ( "STAT"| "STATISTICS" ) >
| < PRIMARYKEY_ : "PRIMARY" ( " " )+ "KEY" >
| < FOREIGNKEY_ : "FOREIGN" ( " " )+ "KEY" >
| < PARTITIONINGKEY_ : "PARTITIONING" ( " " )+ "KEY" >
| < ROUND_ROBIN_ : "ROUND" ( " " )+ "ROBIN" >
| < WITH_XROWID_ : "WITH" ( " " )+ "XROWID" >
| < WITHOUT_XROWID_ : "WITHOUT" ( " " )+ "XROWID" >
| < PARTITION_WITH_ : "PARTITION" ( " " )+ "WITH" >
| < START_DB_ : "START" ( " " )+ "DATABASE" >
| < WAIT_TIMEOUT_ : "WAITTIMEOUT" ( " " )+ >
| < STOP_DB_ : "STOP" ( " " )+ "DATABASE" >
| < CREATE_DB_ : ( <CREATE_> ) ( " " )+ "DATABASE" >
| < CREATE_NODE_ : ( <CREATE_> ) ( " " )+ ( <NODE_> ) >
| < DROP_DB_ : "DROP" ( " " )+ "DATABASE" >
| < SHOW_AGENTS_ : "SHOW" ( " " )+ "AGENTS" >
| < SHOW_CLUSTER_ : "SHOW" ( " " )+ "CLUSTER" >
| < SHOW_STATEMENTS_ : "SHOW" ( " " )+ "STATEMENTS" >
| < SHOW_DATABASES_ : "SHOW" ( " " )+ "DATABASES" >
| < SHOW_TABLES_ : "SHOW" ( " " )+ "TABLES" >
| < SHOW_TRAN_ISOLATION_ : "SHOW" ( " " )+ "TRANSACTION" ( " " )+ "ISOLATION" ( " " )+ "LEVEL" >
| < REPEATABLE_READ_ : "REPEATABLE" ( " " )+ "READ" >
| < READ_COMMITTED_ : "READ" ( " " )+ "COMMITTED" >
| < READ_UNCOMMITTED_ : "READ" ( " " )+ "UNCOMMITTED" >
| < ISOLATION_LEVEL_ : "ISOLATION" ( " " )+ "LEVEL" >
| < SHOW_CONSTRAINTS_ : "SHOW" ( " " )+ "CONSTRAINTS" >
| < OWNER_TO_ : "OWNER" ( " " )+ "TO" >
| < SHOW_TABLE_ : "SHOW" ( " " )+ "TABLE" >
| < SHOW_VIEW_ : "SHOW" ( " " )+ "VIEW" >
| < SHOW_VIEWS_ : "SHOW" ( " " )+ "VIEWS" >
| < SHOW_USERS_ : "SHOW" ( " " )+ "USERS" >
| < FORCE_NOT_NULL_ : "FORCE" ( " " )+ "NOT" ( " " )+ "NULL" >
| < FORCE_QUOTE_ : "FORCE" ( " " )+ "QUOTE" >
| < ON_COMMIT_ : "ON" ( " " )+ "COMMIT" >
| < PRESERVE_ROWS_ : "PRESERVE" ( " " )+ "ROWS" >
| < DELETE_ROWS_ : "DELETE" ( " " )+ "ROWS" >
| < GROUP_BY_ : "GROUP" ( " " )+ "BY" >
| < EXEC_ : "EXEC" ( "UTE" )? >
| < SIMILAR_TO_ : "SIMILAR" ( " " )+ "TO" >
| < SHOW_INDEXES_ : "SHOW" ( " " )+ "INDEXES" >
| < WITH_TIMEZONE_ : "WITH" ( " " )+ "TIME" ( " " )+ "ZONE" >
| < WITHOUT_TIMEZONE_ : "WITHOUT" ( " " )+ "TIME" ( " " )+ "ZONE" >
| < DOUBLE_PRECISION_ : "DOUBLE" ( " " )+ "PRECISION" >
| < BOOLEAN_ : "BOOL" ( "EAN" )? >
}

TOKEN :
{
  < YEAR_FROM : "YEAR" ( " " )* "FROM" >
| < QUARTER_FROM : "QUARTER" ( " " )* "FROM" >
| < MONTH_FROM : "MONTH" ( " " )* "FROM" >
| < WEEK_FROM : "WEEK" ( " " )* "FROM" >
| < DAY_FROM : "DAY" ( " " )* "FROM" >
| < DOY_FROM : "DOY" ( " " )* "FROM" >
| < DOW_FROM : "DOW" ( " " )* "FROM" >
| < DECADE_FROM : "DECADE" ( " " )* "FROM" >
| < CENTURY_FROM : "CENTURY" ( " " )* "FROM" >
| < HOUR_FROM : "HOUR" ( " " )* "FROM" >
| < MINUTE_FROM : "MINUTE" ( " " )* "FROM" >
| < SECOND_FROM : "SECOND" ( " " )* "FROM" >
| < MILLISECOND_FROM : "MILLISECONDS" ( " " )* "FROM" >
| < MILLENNIUM_FROM : "MILLENNIUM" ( " " )* "FROM" >
| < MICROSECONDS_FROM : "MICROSECONDS" ( " " )* "FROM" >
| < EPOCH_FROM : "EPOCH" ( " " )* "FROM" >
}

TOKEN :
{
  < POSITION_ : "POSITION" >
| < VALUES_ : "VALUES" >
    {
      matchedToken.image = image.substring(0, image.length() - 1);
    }
}

TOKEN :
{
  < #SINGLEDIGIT : ["0"-"9"] >
| < INT_LITERAL : ( <SINGLEDIGIT> )+ >
| < DECIMAL_LITERAL : ( <SINGLEDIGIT> )* "." ( <SINGLEDIGIT> )+ >
| < SCIENTIFIC_LITERAL : ( ( ( <SINGLEDIGIT> )+ )? "." )? ( <SINGLEDIGIT> )+ "E" ( ["-", "+"] )? ( <SINGLEDIGIT> )+ >
}

TOKEN :
{
  < STRING_LITERAL : "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
}

TOKEN :
{
  < PARAM_PLACE_HOLDER : "$" ( <SINGLEDIGIT> )+ >
}

TOKEN :
{
  < INTERVAL_LITERAL : "INTERVAL" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < DATE_LITERAL : "DATE" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < TIME_LITERAL : "TIME" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < TIMESTAMP_LITERAL : "TIMESTAMP" ( " " )* ( ( <WITH_TIMEZONE_>| <WITHOUT_TIMEZONE_> ) ( " " )* )? "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < TEXT_LITERAL : "TEXT" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < INTEGER_LITERAL : "INTEGER" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < MACADDR_LITERAL : "MACADDR" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < CIDR_LITERAL : "CIDR" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < INET_LITERAL : "INET" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
| < GEOMETRY_LITERAL : "GEOMETRY" ( " " )* "'" ( ~["'"] )* ( "''" ( ~["'"] )* )* "'" >
}

TOKEN :
{
  < BINARY_LITERAL : "b'" ( ( "0"| "1" ) )+ "'" >
| < HEXDECIMAL_LITERAL : "x'" ( ( "0"| "1"| "2"| "3"| "4"| "5"| "6"| "7"| "8"| "9"| "a"| "b"| "c"| "d"| "e"| "f" ) )+ "'" >
}

numberValue numberValue(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  FloatingPointNumber n0 = null;
}
{
  n0 = FloatingPointNumber(prn)
  { return new numberValue(n0); }
}

stringLiteral stringLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < STRING_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new stringLiteral(n0); }
}

TOKEN :
{
  < #LETTER : ["_", "a"-"z", "A"-"Z"] >
}

TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <SINGLEDIGIT> )* >
| < QUOTED_IDENTIFIER : "\"" ( ~["\""] )* ( "\"\"" ( ~["\""] )* )* "\"" >
}

UnreservedWords UnreservedWords(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeToken n41 = null;
  Token n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  NodeToken n45 = null;
  Token n46 = null;
  NodeToken n47 = null;
  Token n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeToken n51 = null;
  Token n52 = null;
  NodeToken n53 = null;
  Token n54 = null;
  NodeToken n55 = null;
  Token n56 = null;
  NodeToken n57 = null;
  Token n58 = null;
  NodeToken n59 = null;
  Token n60 = null;
  NodeToken n61 = null;
  Token n62 = null;
  NodeToken n63 = null;
  Token n64 = null;
  NodeToken n65 = null;
  Token n66 = null;
  NodeToken n67 = null;
  Token n68 = null;
  NodeToken n69 = null;
  Token n70 = null;
  NodeToken n71 = null;
  Token n72 = null;
  NodeToken n73 = null;
  Token n74 = null;
  NodeToken n75 = null;
  Token n76 = null;
  NodeToken n77 = null;
  Token n78 = null;
  NodeToken n79 = null;
  Token n80 = null;
  NodeToken n81 = null;
  Token n82 = null;
  NodeToken n83 = null;
  Token n84 = null;
  NodeToken n85 = null;
  Token n86 = null;
  NodeToken n87 = null;
  Token n88 = null;
  NodeToken n89 = null;
  Token n90 = null;
  NodeToken n91 = null;
  Token n92 = null;
  NodeToken n93 = null;
  Token n94 = null;
  NodeToken n95 = null;
  Token n96 = null;
  NodeToken n97 = null;
  Token n98 = null;
  NodeToken n99 = null;
  Token n100 = null;
  NodeToken n101 = null;
  Token n102 = null;
  NodeToken n103 = null;
  Token n104 = null;
  NodeToken n105 = null;
  Token n106 = null;
  NodeToken n107 = null;
  Token n108 = null;
  NodeToken n109 = null;
  Token n110 = null;
  NodeToken n111 = null;
  Token n112 = null;
  NodeToken n113 = null;
  Token n114 = null;
  NodeToken n115 = null;
  Token n116 = null;
  NodeToken n117 = null;
  Token n118 = null;
  NodeToken n119 = null;
  Token n120 = null;
  NodeToken n121 = null;
  Token n122 = null;
  NodeToken n123 = null;
  Token n124 = null;
  NodeToken n125 = null;
  Token n126 = null;
  NodeToken n127 = null;
  Token n128 = null;
  NodeToken n129 = null;
  Token n130 = null;
  NodeToken n131 = null;
  Token n132 = null;
  NodeToken n133 = null;
  Token n134 = null;
  NodeToken n135 = null;
  Token n136 = null;
  NodeToken n137 = null;
  Token n138 = null;
  NodeToken n139 = null;
  Token n140 = null;
  NodeToken n141 = null;
  Token n142 = null;
  NodeToken n143 = null;
  Token n144 = null;
  NodeToken n145 = null;
  Token n146 = null;
  NodeToken n147 = null;
  Token n148 = null;
  NodeToken n149 = null;
  Token n150 = null;
  NodeToken n151 = null;
  Token n152 = null;
  NodeToken n153 = null;
  Token n154 = null;
  NodeToken n155 = null;
  Token n156 = null;
  NodeToken n157 = null;
  Token n158 = null;
  NodeToken n159 = null;
  Token n160 = null;
  NodeToken n161 = null;
  Token n162 = null;
  NodeToken n163 = null;
  Token n164 = null;
  NodeToken n165 = null;
  Token n166 = null;
  NodeToken n167 = null;
  Token n168 = null;
  NodeToken n169 = null;
  Token n170 = null;
  NodeToken n171 = null;
  Token n172 = null;
  NodeToken n173 = null;
  Token n174 = null;
  NodeToken n175 = null;
  Token n176 = null;
  NodeToken n177 = null;
  Token n178 = null;
  NodeToken n179 = null;
  Token n180 = null;
  NodeToken n181 = null;
  Token n182 = null;
  NodeToken n183 = null;
  Token n184 = null;
  NodeToken n185 = null;
  Token n186 = null;
  NodeToken n187 = null;
  Token n188 = null;
  NodeToken n189 = null;
  Token n190 = null;
  NodeToken n191 = null;
  Token n192 = null;
  NodeToken n193 = null;
  Token n194 = null;
  NodeToken n195 = null;
  Token n196 = null;
  NodeToken n197 = null;
  Token n198 = null;
  NodeToken n199 = null;
  Token n200 = null;
  NodeToken n201 = null;
  Token n202 = null;
  NodeToken n203 = null;
  Token n204 = null;
  NodeToken n205 = null;
  Token n206 = null;
  NodeToken n207 = null;
  Token n208 = null;
  NodeToken n209 = null;
  Token n210 = null;
  NodeToken n211 = null;
  Token n212 = null;
  NodeToken n213 = null;
  Token n214 = null;
  NodeToken n215 = null;
  Token n216 = null;
  NodeToken n217 = null;
  Token n218 = null;
  NodeToken n219 = null;
  Token n220 = null;
  NodeToken n221 = null;
  Token n222 = null;
  NodeToken n223 = null;
  Token n224 = null;
  NodeToken n225 = null;
  Token n226 = null;
  NodeToken n227 = null;
  Token n228 = null;
  NodeToken n229 = null;
  Token n230 = null;
  NodeToken n231 = null;
  Token n232 = null;
  NodeToken n233 = null;
  Token n234 = null;
  NodeToken n235 = null;
  Token n236 = null;
  NodeToken n237 = null;
  Token n238 = null;
  NodeToken n239 = null;
  Token n240 = null;
  NodeToken n241 = null;
  Token n242 = null;
  NodeToken n243 = null;
  Token n244 = null;
  NodeToken n245 = null;
  Token n246 = null;
  NodeToken n247 = null;
  Token n248 = null;
  NodeToken n249 = null;
  Token n250 = null;
  NodeToken n251 = null;
  Token n252 = null;
  NodeToken n253 = null;
  Token n254 = null;
  NodeToken n255 = null;
  Token n256 = null;
  NodeToken n257 = null;
  Token n258 = null;
  NodeToken n259 = null;
  Token n260 = null;
  NodeToken n261 = null;
  Token n262 = null;
  NodeToken n263 = null;
  Token n264 = null;
  NodeToken n265 = null;
  Token n266 = null;
  NodeToken n267 = null;
  Token n268 = null;
}
{
  (
    n2 = < POSITION_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 134); }
  |
    LOOKAHEAD( 2 )
    n4 = < DATE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 134); }
  |
    n6 = < DAY_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 134); }
  |
    n8 = < QUARTER_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 134); }
  |
    LOOKAHEAD( 2 )
    n10 = < TIME_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 134); }
  |
    LOOKAHEAD( 2 )
    n12 = < TIMESTAMP_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 134); }
  |
    n14 = < WITH_TIMEZONE_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 134); }
  |
    n16 = < WITHOUT_TIMEZONE_ >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 134); }
  |
    n18 = < DATETIME_ >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n0 = new NodeChoice(n17, 8, 134); }
  |
    n20 = < SAMLLDATETIME_ >
    { n19 = JTBToolkit.makeNodeToken(n20); }
    { n0 = new NodeChoice(n19, 9, 134); }
  |
    n22 = < PASSWORD_ >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n0 = new NodeChoice(n21, 10, 134); }
  |
    n24 = < AVERAGE_ >
    { n23 = JTBToolkit.makeNodeToken(n24); }
    { n0 = new NodeChoice(n23, 11, 134); }
  |
    n26 = < COUNT_ >
    { n25 = JTBToolkit.makeNodeToken(n26); }
    { n0 = new NodeChoice(n25, 12, 134); }
  |
    n28 = < EXTRACT_ >
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n0 = new NodeChoice(n27, 13, 134); }
  |
    n30 = < MAX_ >
    { n29 = JTBToolkit.makeNodeToken(n30); }
    { n0 = new NodeChoice(n29, 14, 134); }
  |
    n32 = < CURRENTDATE_ >
    { n31 = JTBToolkit.makeNodeToken(n32); }
    { n0 = new NodeChoice(n31, 15, 134); }
  |
    n34 = < CURRENT_TIME_ >
    { n33 = JTBToolkit.makeNodeToken(n34); }
    { n0 = new NodeChoice(n33, 16, 134); }
  |
    n36 = < CURRENT_TIMESTAMP_ >
    { n35 = JTBToolkit.makeNodeToken(n36); }
    { n0 = new NodeChoice(n35, 17, 134); }
  |
    n38 = < TRUNCATE_ >
    { n37 = JTBToolkit.makeNodeToken(n38); }
    { n0 = new NodeChoice(n37, 18, 134); }
  |
    n40 = < USER_ >
    { n39 = JTBToolkit.makeNodeToken(n40); }
    { n0 = new NodeChoice(n39, 19, 134); }
  |
    n42 = < YEAR_ >
    { n41 = JTBToolkit.makeNodeToken(n42); }
    { n0 = new NodeChoice(n41, 20, 134); }
  |
    n44 = < MONTH_ >
    { n43 = JTBToolkit.makeNodeToken(n44); }
    { n0 = new NodeChoice(n43, 21, 134); }
  |
    n46 = < HOUR_ >
    { n45 = JTBToolkit.makeNodeToken(n46); }
    { n0 = new NodeChoice(n45, 22, 134); }
  |
    n48 = < MINUTE_ >
    { n47 = JTBToolkit.makeNodeToken(n48); }
    { n0 = new NodeChoice(n47, 23, 134); }
  |
    n50 = < SECOND_ >
    { n49 = JTBToolkit.makeNodeToken(n50); }
    { n0 = new NodeChoice(n49, 24, 134); }
  |
    n52 = < SUBSTRING_ >
    { n51 = JTBToolkit.makeNodeToken(n52); }
    { n0 = new NodeChoice(n51, 25, 134); }
  |
    n54 = < WEEK_ >
    { n53 = JTBToolkit.makeNodeToken(n54); }
    { n0 = new NodeChoice(n53, 26, 134); }
  |
    n56 = < DATABASE_ >
    { n55 = JTBToolkit.makeNodeToken(n56); }
    { n0 = new NodeChoice(n55, 27, 134); }
  |
    n58 = < VERSION_ >
    { n57 = JTBToolkit.makeNodeToken(n58); }
    { n0 = new NodeChoice(n57, 28, 134); }
  |
    n60 = < MIN_ >
    { n59 = JTBToolkit.makeNodeToken(n60); }
    { n0 = new NodeChoice(n59, 29, 134); }
  |
    n62 = < STDDEV_ >
    { n61 = JTBToolkit.makeNodeToken(n62); }
    { n0 = new NodeChoice(n61, 30, 134); }
  |
    n64 = < STDDEV_POP_ >
    { n63 = JTBToolkit.makeNodeToken(n64); }
    { n0 = new NodeChoice(n63, 31, 134); }
  |
    n66 = < STDDEV_SAMP_ >
    { n65 = JTBToolkit.makeNodeToken(n66); }
    { n0 = new NodeChoice(n65, 32, 134); }
  |
    n68 = < SUM_ >
    { n67 = JTBToolkit.makeNodeToken(n68); }
    { n0 = new NodeChoice(n67, 33, 134); }
  |
    n70 = < VARIANCE_ >
    { n69 = JTBToolkit.makeNodeToken(n70); }
    { n0 = new NodeChoice(n69, 34, 134); }
  |
    n72 = < VARIANCE_POP_ >
    { n71 = JTBToolkit.makeNodeToken(n72); }
    { n0 = new NodeChoice(n71, 35, 134); }
  |
    n74 = < VARIANCE_SAMP_ >
    { n73 = JTBToolkit.makeNodeToken(n74); }
    { n0 = new NodeChoice(n73, 36, 134); }
  |
    n76 = < VAR_POP_ >
    { n75 = JTBToolkit.makeNodeToken(n76); }
    { n0 = new NodeChoice(n75, 37, 134); }
  |
    n78 = < VAR_SAMP_ >
    { n77 = JTBToolkit.makeNodeToken(n78); }
    { n0 = new NodeChoice(n77, 38, 134); }
  |
    n80 = < REPLACE_ >
    { n79 = JTBToolkit.makeNodeToken(n80); }
    { n0 = new NodeChoice(n79, 39, 134); }
  |
    n82 = < TRIM_ >
    { n81 = JTBToolkit.makeNodeToken(n82); }
    { n0 = new NodeChoice(n81, 40, 134); }
  |
    n84 = < FIXED_ >
    { n83 = JTBToolkit.makeNodeToken(n84); }
    { n0 = new NodeChoice(n83, 41, 134); }
  |
    n86 = < CONVERT_ >
    { n85 = JTBToolkit.makeNodeToken(n86); }
    { n0 = new NodeChoice(n85, 42, 134); }
  |
    n88 = < OVERLAY_ >
    { n87 = JTBToolkit.makeNodeToken(n88); }
    { n0 = new NodeChoice(n87, 43, 134); }
  |
    n90 = < PLACING_ >
    { n89 = JTBToolkit.makeNodeToken(n90); }
    { n0 = new NodeChoice(n89, 44, 134); }
  |
    n92 = < STORAGE_ >
    { n91 = JTBToolkit.makeNodeToken(n92); }
    { n0 = new NodeChoice(n91, 45, 134); }
  |
    n94 = < TYPE_ >
    { n93 = JTBToolkit.makeNodeToken(n94); }
    { n0 = new NodeChoice(n93, 46, 134); }
  |
    n96 = < CLOCK_TIMESTAMP_ >
    { n95 = JTBToolkit.makeNodeToken(n96); }
    { n0 = new NodeChoice(n95, 47, 134); }
  |
    n98 = < STATEMENT_TIMESTAMP_ >
    { n97 = JTBToolkit.makeNodeToken(n98); }
    { n0 = new NodeChoice(n97, 48, 134); }
  |
    n100 = < TRANSACTION_TIMESTAMP_ >
    { n99 = JTBToolkit.makeNodeToken(n100); }
    { n0 = new NodeChoice(n99, 49, 134); }
  |
    n102 = < SMALLINT_ >
    { n101 = JTBToolkit.makeNodeToken(n102); }
    { n0 = new NodeChoice(n101, 50, 134); }
  |
    n104 = < TINYINT_ >
    { n103 = JTBToolkit.makeNodeToken(n104); }
    { n0 = new NodeChoice(n103, 51, 134); }
  |
    n106 = < INT2_ >
    { n105 = JTBToolkit.makeNodeToken(n106); }
    { n0 = new NodeChoice(n105, 52, 134); }
  |
    n108 = < BYTEA_ >
    { n107 = JTBToolkit.makeNodeToken(n108); }
    { n0 = new NodeChoice(n107, 53, 134); }
  |
    n110 = < BIGINT_ >
    { n109 = JTBToolkit.makeNodeToken(n110); }
    { n0 = new NodeChoice(n109, 54, 134); }
  |
    n112 = < INT8_ >
    { n111 = JTBToolkit.makeNodeToken(n112); }
    { n0 = new NodeChoice(n111, 55, 134); }
  |
    n114 = < BIGINTEGER_ >
    { n113 = JTBToolkit.makeNodeToken(n114); }
    { n0 = new NodeChoice(n113, 56, 134); }
  |
    n116 = < INT_ >
    { n115 = JTBToolkit.makeNodeToken(n116); }
    { n0 = new NodeChoice(n115, 57, 134); }
  |
    n118 = < INTEGER_ >
    { n117 = JTBToolkit.makeNodeToken(n118); }
    { n0 = new NodeChoice(n117, 58, 134); }
  |
    n120 = < INT4_ >
    { n119 = JTBToolkit.makeNodeToken(n120); }
    { n0 = new NodeChoice(n119, 59, 134); }
  |
    n122 = < REAL_ >
    { n121 = JTBToolkit.makeNodeToken(n122); }
    { n0 = new NodeChoice(n121, 60, 134); }
  |
    n124 = < SMALLFLOAT_ >
    { n123 = JTBToolkit.makeNodeToken(n124); }
    { n0 = new NodeChoice(n123, 61, 134); }
  |
    n126 = < FLOAT_ >
    { n125 = JTBToolkit.makeNodeToken(n126); }
    { n0 = new NodeChoice(n125, 62, 134); }
  |
    n128 = < FLOAT4_ >
    { n127 = JTBToolkit.makeNodeToken(n128); }
    { n0 = new NodeChoice(n127, 63, 134); }
  |
    n130 = < FLOAT8_ >
    { n129 = JTBToolkit.makeNodeToken(n130); }
    { n0 = new NodeChoice(n129, 64, 134); }
  |
    n132 = < DECIMAL_ >
    { n131 = JTBToolkit.makeNodeToken(n132); }
    { n0 = new NodeChoice(n131, 65, 134); }
  |
    n134 = < NUMERIC_ >
    { n133 = JTBToolkit.makeNodeToken(n134); }
    { n0 = new NodeChoice(n133, 66, 134); }
  |
    n136 = < SMALLMONEY_ >
    { n135 = JTBToolkit.makeNodeToken(n136); }
    { n0 = new NodeChoice(n135, 67, 134); }
  |
    n138 = < MONEY_ >
    { n137 = JTBToolkit.makeNodeToken(n138); }
    { n0 = new NodeChoice(n137, 68, 134); }
  |
    n140 = < NUMBER_ >
    { n139 = JTBToolkit.makeNodeToken(n140); }
    { n0 = new NodeChoice(n139, 69, 134); }
  |
    n142 = < CHAR_ >
    { n141 = JTBToolkit.makeNodeToken(n142); }
    { n0 = new NodeChoice(n141, 70, 134); }
  |
    n144 = < CHARACHTER_ >
    { n143 = JTBToolkit.makeNodeToken(n144); }
    { n0 = new NodeChoice(n143, 71, 134); }
  |
    n146 = < VARCHAR_ >
    { n145 = JTBToolkit.makeNodeToken(n146); }
    { n0 = new NodeChoice(n145, 72, 134); }
  |
    n148 = < TINYTEXT_ >
    { n147 = JTBToolkit.makeNodeToken(n148); }
    { n0 = new NodeChoice(n147, 73, 134); }
  |
    n150 = < VARCHAR2_ >
    { n149 = JTBToolkit.makeNodeToken(n150); }
    { n0 = new NodeChoice(n149, 74, 134); }
  |
    n152 = < DATE_ >
    { n151 = JTBToolkit.makeNodeToken(n152); }
    { n0 = new NodeChoice(n151, 75, 134); }
  |
    n154 = < TIME_ >
    { n153 = JTBToolkit.makeNodeToken(n154); }
    { n0 = new NodeChoice(n153, 76, 134); }
  |
    n156 = < TIMESTAMP_ >
    { n155 = JTBToolkit.makeNodeToken(n156); }
    { n0 = new NodeChoice(n155, 77, 134); }
  |
    n158 = < DEC_ >
    { n157 = JTBToolkit.makeNodeToken(n158); }
    { n0 = new NodeChoice(n157, 78, 134); }
  |
    n160 = < DOUBLE_PRECISION_ >
    { n159 = JTBToolkit.makeNodeToken(n160); }
    { n0 = new NodeChoice(n159, 79, 134); }
  |
    n162 = < NCHAR_ >
    { n161 = JTBToolkit.makeNodeToken(n162); }
    { n0 = new NodeChoice(n161, 80, 134); }
  |
    n164 = < NATIONAL_ >
    { n163 = JTBToolkit.makeNodeToken(n164); }
    { n0 = new NodeChoice(n163, 81, 134); }
  |
    n166 = < VARYING_ >
    { n165 = JTBToolkit.makeNodeToken(n166); }
    { n0 = new NodeChoice(n165, 82, 134); }
  |
    n168 = < BOOLEAN_ >
    { n167 = JTBToolkit.makeNodeToken(n168); }
    { n0 = new NodeChoice(n167, 83, 134); }
  |
    n170 = < INTERVAL_ >
    { n169 = JTBToolkit.makeNodeToken(n170); }
    { n0 = new NodeChoice(n169, 84, 134); }
  |
    n172 = < TEXT_ >
    { n171 = JTBToolkit.makeNodeToken(n172); }
    { n0 = new NodeChoice(n171, 85, 134); }
  |
    n174 = < MEDIUMTEXT_ >
    { n173 = JTBToolkit.makeNodeToken(n174); }
    { n0 = new NodeChoice(n173, 86, 134); }
  |
    n176 = < LVARCHAR_ >
    { n175 = JTBToolkit.makeNodeToken(n176); }
    { n0 = new NodeChoice(n175, 87, 134); }
  |
    n178 = < LONGTEXT_ >
    { n177 = JTBToolkit.makeNodeToken(n178); }
    { n0 = new NodeChoice(n177, 88, 134); }
  |
    n180 = < LONG_VARCHAR_ >
    { n179 = JTBToolkit.makeNodeToken(n180); }
    { n0 = new NodeChoice(n179, 89, 134); }
  |
    n182 = < LONG_ >
    { n181 = JTBToolkit.makeNodeToken(n182); }
    { n0 = new NodeChoice(n181, 90, 134); }
  |
    n184 = < CLOB_ >
    { n183 = JTBToolkit.makeNodeToken(n184); }
    { n0 = new NodeChoice(n183, 91, 134); }
  |
    n186 = < BLOB_ >
    { n185 = JTBToolkit.makeNodeToken(n186); }
    { n0 = new NodeChoice(n185, 92, 134); }
  |
    n188 = < BINARY_ >
    { n187 = JTBToolkit.makeNodeToken(n188); }
    { n0 = new NodeChoice(n187, 93, 134); }
  |
    n190 = < VARBINARY_ >
    { n189 = JTBToolkit.makeNodeToken(n190); }
    { n0 = new NodeChoice(n189, 94, 134); }
  |
    n192 = < RAW_ >
    { n191 = JTBToolkit.makeNodeToken(n192); }
    { n0 = new NodeChoice(n191, 95, 134); }
  |
    n194 = < LONG_RAW_ >
    { n193 = JTBToolkit.makeNodeToken(n194); }
    { n0 = new NodeChoice(n193, 96, 134); }
  |
    n196 = < IMAGE_ >
    { n195 = JTBToolkit.makeNodeToken(n196); }
    { n0 = new NodeChoice(n195, 97, 134); }
  |
    n198 = < BYTE_ >
    { n197 = JTBToolkit.makeNodeToken(n198); }
    { n0 = new NodeChoice(n197, 98, 134); }
  |
    n200 = < CLUSTER_ >
    { n199 = JTBToolkit.makeNodeToken(n200); }
    { n0 = new NodeChoice(n199, 99, 134); }
  |
    n202 = < CURRENT_USER_ >
    { n201 = JTBToolkit.makeNodeToken(n202); }
    { n0 = new NodeChoice(n201, 100, 134); }
  |
    n204 = < NULLIF_ >
    { n203 = JTBToolkit.makeNodeToken(n204); }
    { n0 = new NodeChoice(n203, 101, 134); }
  |
    n206 = < CURRENT_DATABASE_ >
    { n205 = JTBToolkit.makeNodeToken(n206); }
    { n0 = new NodeChoice(n205, 102, 134); }
  |
    n208 = < CURRENT_SCHEMA_ >
    { n207 = JTBToolkit.makeNodeToken(n208); }
    { n0 = new NodeChoice(n207, 103, 134); }
  |
    n210 = < BIT_AND_ >
    { n209 = JTBToolkit.makeNodeToken(n210); }
    { n0 = new NodeChoice(n209, 104, 134); }
  |
    n212 = < BIT_OR_ >
    { n211 = JTBToolkit.makeNodeToken(n212); }
    { n0 = new NodeChoice(n211, 105, 134); }
  |
    n214 = < BOOL_AND_ >
    { n213 = JTBToolkit.makeNodeToken(n214); }
    { n0 = new NodeChoice(n213, 106, 134); }
  |
    n216 = < BOOL_OR_ >
    { n215 = JTBToolkit.makeNodeToken(n216); }
    { n0 = new NodeChoice(n215, 107, 134); }
  |
    n218 = < EVERY_ >
    { n217 = JTBToolkit.makeNodeToken(n218); }
    { n0 = new NodeChoice(n217, 108, 134); }
  |
    n220 = < CORR_ >
    { n219 = JTBToolkit.makeNodeToken(n220); }
    { n0 = new NodeChoice(n219, 109, 134); }
  |
    n222 = < COVAR_POP_ >
    { n221 = JTBToolkit.makeNodeToken(n222); }
    { n0 = new NodeChoice(n221, 110, 134); }
  |
    n224 = < COVAR_SAMP_ >
    { n223 = JTBToolkit.makeNodeToken(n224); }
    { n0 = new NodeChoice(n223, 111, 134); }
  |
    n226 = < REGR_AVGX_ >
    { n225 = JTBToolkit.makeNodeToken(n226); }
    { n0 = new NodeChoice(n225, 112, 134); }
  |
    n228 = < REGR_AVGY_ >
    { n227 = JTBToolkit.makeNodeToken(n228); }
    { n0 = new NodeChoice(n227, 113, 134); }
  |
    n230 = < REGR_COUNT_ >
    { n229 = JTBToolkit.makeNodeToken(n230); }
    { n0 = new NodeChoice(n229, 114, 134); }
  |
    n232 = < REGR_INTERCEPT_ >
    { n231 = JTBToolkit.makeNodeToken(n232); }
    { n0 = new NodeChoice(n231, 115, 134); }
  |
    n234 = < REGR_R2_ >
    { n233 = JTBToolkit.makeNodeToken(n234); }
    { n0 = new NodeChoice(n233, 116, 134); }
  |
    n236 = < REGR_SLOPE_ >
    { n235 = JTBToolkit.makeNodeToken(n236); }
    { n0 = new NodeChoice(n235, 117, 134); }
  |
    n238 = < REGR_SXX_ >
    { n237 = JTBToolkit.makeNodeToken(n238); }
    { n0 = new NodeChoice(n237, 118, 134); }
  |
    n240 = < REGR_SXY_ >
    { n239 = JTBToolkit.makeNodeToken(n240); }
    { n0 = new NodeChoice(n239, 119, 134); }
  |
    n242 = < REGR_SYY_ >
    { n241 = JTBToolkit.makeNodeToken(n242); }
    { n0 = new NodeChoice(n241, 120, 134); }
  |
    n244 = < GEOMETRY_ >
    { n243 = JTBToolkit.makeNodeToken(n244); }
    { n0 = new NodeChoice(n243, 121, 134); }
  |
    n246 = < BOX2D_ >
    { n245 = JTBToolkit.makeNodeToken(n246); }
    { n0 = new NodeChoice(n245, 122, 134); }
  |
    n248 = < BOX3D_ >
    { n247 = JTBToolkit.makeNodeToken(n248); }
    { n0 = new NodeChoice(n247, 123, 134); }
  |
    n250 = < BOX3DEXTENT_ >
    { n249 = JTBToolkit.makeNodeToken(n250); }
    { n0 = new NodeChoice(n249, 124, 134); }
  |
    n252 = < REGCLASS_ >
    { n251 = JTBToolkit.makeNodeToken(n252); }
    { n0 = new NodeChoice(n251, 125, 134); }
  |
    n254 = < ASBINARY_ >
    { n253 = JTBToolkit.makeNodeToken(n254); }
    { n0 = new NodeChoice(n253, 126, 134); }
  |
    n256 = < ADDGEOMETRYCOLUMN_ >
    { n255 = JTBToolkit.makeNodeToken(n256); }
    { n0 = new NodeChoice(n255, 127, 134); }
  |
    n258 = < PERIMETER2D_ >
    { n257 = JTBToolkit.makeNodeToken(n258); }
    { n0 = new NodeChoice(n257, 128, 134); }
  |
    n260 = < PERIMETER3D_ >
    { n259 = JTBToolkit.makeNodeToken(n260); }
    { n0 = new NodeChoice(n259, 129, 134); }
  |
    n262 = < SPATIAL_ >
    { n261 = JTBToolkit.makeNodeToken(n262); }
    { n0 = new NodeChoice(n261, 130, 134); }
  |
    n264 = < PORT_ >
    { n263 = JTBToolkit.makeNodeToken(n264); }
    { n0 = new NodeChoice(n263, 131, 134); }
  |
    n266 = < ONLY_ >
    { n265 = JTBToolkit.makeNodeToken(n266); }
    { n0 = new NodeChoice(n265, 132, 134); }
  |
    n268 = < WITH_ >
    { n267 = JTBToolkit.makeNodeToken(n268); }
    { n0 = new NodeChoice(n267, 133, 134); }
  )
  { return new UnreservedWords(n0); }
}

Identifier Identifier(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  UnreservedWords n5 = null;
}
{
  (
    n2 = < IDENTIFIER >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < QUOTED_IDENTIFIER >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n5 = UnreservedWords(prn)
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new Identifier(n0); }
}

process process(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  VacuumDatabase n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  AnalyzeDatabase n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  createTable n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  CreateTablespace n17 = null;
  NodeOptional n18 = new NodeOptional();
  NodeToken n19 = null;
  Token n20 = null;
  NodeSequence n21 = null;
  createIndex n22 = null;
  NodeOptional n23 = new NodeOptional();
  NodeToken n24 = null;
  Token n25 = null;
  NodeSequence n26 = null;
  dropTable n27 = null;
  NodeOptional n28 = new NodeOptional();
  NodeToken n29 = null;
  Token n30 = null;
  NodeSequence n31 = null;
  DropTablespace n32 = null;
  NodeOptional n33 = new NodeOptional();
  NodeToken n34 = null;
  Token n35 = null;
  NodeSequence n36 = null;
  SelectAddGeometryColumn n37 = null;
  NodeOptional n38 = new NodeOptional();
  NodeToken n39 = null;
  Token n40 = null;
  NodeSequence n41 = null;
  SelectWithParenthesis n42 = null;
  NodeOptional n43 = new NodeOptional();
  NodeToken n44 = null;
  Token n45 = null;
  NodeSequence n46 = null;
  WithSelect n47 = null;
  NodeOptional n48 = new NodeOptional();
  NodeToken n49 = null;
  Token n50 = null;
  NodeSequence n51 = null;
  InsertTable n52 = null;
  NodeOptional n53 = new NodeOptional();
  NodeToken n54 = null;
  Token n55 = null;
  NodeSequence n56 = null;
  UpdateTable n57 = null;
  NodeOptional n58 = new NodeOptional();
  NodeToken n59 = null;
  Token n60 = null;
  NodeSequence n61 = null;
  Delete n62 = null;
  NodeOptional n63 = new NodeOptional();
  NodeToken n64 = null;
  Token n65 = null;
  NodeSequence n66 = null;
  Alter n67 = null;
  NodeOptional n68 = new NodeOptional();
  NodeToken n69 = null;
  Token n70 = null;
  NodeSequence n71 = null;
  DropIndex n72 = null;
  NodeOptional n73 = new NodeOptional();
  NodeToken n74 = null;
  Token n75 = null;
  NodeSequence n76 = null;
  RenameTable n77 = null;
  NodeOptional n78 = new NodeOptional();
  NodeToken n79 = null;
  Token n80 = null;
  NodeSequence n81 = null;
  UpdateStats n82 = null;
  NodeOptional n83 = new NodeOptional();
  NodeToken n84 = null;
  Token n85 = null;
  NodeSequence n86 = null;
  ShowAgents n87 = null;
  NodeOptional n88 = new NodeOptional();
  NodeToken n89 = null;
  Token n90 = null;
  NodeSequence n91 = null;
  ShowCluster n92 = null;
  NodeOptional n93 = new NodeOptional();
  NodeToken n94 = null;
  Token n95 = null;
  NodeSequence n96 = null;
  ShowDatabases n97 = null;
  NodeOptional n98 = new NodeOptional();
  NodeToken n99 = null;
  Token n100 = null;
  NodeSequence n101 = null;
  ShowStatements n102 = null;
  NodeOptional n103 = new NodeOptional();
  NodeToken n104 = null;
  Token n105 = null;
  NodeSequence n106 = null;
  ShowTables n107 = null;
  NodeOptional n108 = new NodeOptional();
  NodeToken n109 = null;
  Token n110 = null;
  NodeSequence n111 = null;
  ShowTranIsolation n112 = null;
  NodeOptional n113 = new NodeOptional();
  NodeToken n114 = null;
  Token n115 = null;
  NodeSequence n116 = null;
  BeginTransaction n117 = null;
  NodeOptional n118 = new NodeOptional();
  NodeToken n119 = null;
  Token n120 = null;
  NodeSequence n121 = null;
  CommitTransaction n122 = null;
  NodeOptional n123 = new NodeOptional();
  NodeToken n124 = null;
  Token n125 = null;
  NodeSequence n126 = null;
  RollbackTransaction n127 = null;
  NodeOptional n128 = new NodeOptional();
  NodeToken n129 = null;
  Token n130 = null;
  NodeSequence n131 = null;
  DescribeTable n132 = null;
  NodeOptional n133 = new NodeOptional();
  NodeToken n134 = null;
  Token n135 = null;
  NodeSequence n136 = null;
  ShowConstraints n137 = null;
  NodeOptional n138 = new NodeOptional();
  NodeToken n139 = null;
  Token n140 = null;
  NodeSequence n141 = null;
  ShowIndexes n142 = null;
  NodeOptional n143 = new NodeOptional();
  NodeToken n144 = null;
  Token n145 = null;
  NodeSequence n146 = null;
  Deallocate n147 = null;
  NodeOptional n148 = new NodeOptional();
  NodeToken n149 = null;
  Token n150 = null;
  NodeSequence n151 = null;
  CreateUser n152 = null;
  NodeOptional n153 = new NodeOptional();
  NodeToken n154 = null;
  Token n155 = null;
  NodeSequence n156 = null;
  DropUser n157 = null;
  NodeOptional n158 = new NodeOptional();
  NodeToken n159 = null;
  Token n160 = null;
  NodeSequence n161 = null;
  AlterUser n162 = null;
  NodeOptional n163 = new NodeOptional();
  NodeToken n164 = null;
  Token n165 = null;
  NodeSequence n166 = null;
  Grant n167 = null;
  NodeOptional n168 = new NodeOptional();
  NodeToken n169 = null;
  Token n170 = null;
  NodeSequence n171 = null;
  Revoke n172 = null;
  NodeOptional n173 = new NodeOptional();
  NodeToken n174 = null;
  Token n175 = null;
  NodeSequence n176 = null;
  createView n177 = null;
  NodeOptional n178 = new NodeOptional();
  NodeToken n179 = null;
  Token n180 = null;
  NodeSequence n181 = null;
  DropView n182 = null;
  NodeOptional n183 = new NodeOptional();
  NodeToken n184 = null;
  Token n185 = null;
  NodeSequence n186 = null;
  ShowUsers n187 = null;
  NodeOptional n188 = new NodeOptional();
  NodeToken n189 = null;
  Token n190 = null;
  NodeSequence n191 = null;
  ShowViews n192 = null;
  NodeOptional n193 = new NodeOptional();
  NodeToken n194 = null;
  Token n195 = null;
  NodeSequence n196 = null;
  Cluster n197 = null;
  NodeOptional n198 = new NodeOptional();
  NodeToken n199 = null;
  Token n200 = null;
  NodeSequence n201 = null;
  Truncate n202 = null;
  NodeOptional n203 = new NodeOptional();
  NodeToken n204 = null;
  Token n205 = null;
  NodeSequence n206 = null;
  ExecDirect n207 = null;
  NodeOptional n208 = new NodeOptional();
  NodeToken n209 = null;
  Token n210 = null;
  NodeSequence n211 = null;
  Explain n212 = null;
  NodeOptional n213 = new NodeOptional();
  NodeToken n214 = null;
  Token n215 = null;
  NodeSequence n216 = null;
  SetProperty n217 = null;
  NodeOptional n218 = new NodeOptional();
  NodeToken n219 = null;
  Token n220 = null;
  NodeSequence n221 = null;
  ShowProperty n222 = null;
  NodeOptional n223 = new NodeOptional();
  NodeToken n224 = null;
  Token n225 = null;
  NodeSequence n226 = null;
  AddNodeToDB n227 = null;
  NodeOptional n228 = new NodeOptional();
  NodeToken n229 = null;
  Token n230 = null;
  NodeSequence n231 = null;
  DropNodeFromDB n232 = null;
  NodeOptional n233 = new NodeOptional();
  NodeToken n234 = null;
  Token n235 = null;
  NodeSequence n236 = null;
  StartDatabase n237 = null;
  NodeOptional n238 = new NodeOptional();
  NodeToken n239 = null;
  Token n240 = null;
  NodeSequence n241 = null;
  StopDatabase n242 = null;
  NodeOptional n243 = new NodeOptional();
  NodeToken n244 = null;
  Token n245 = null;
  NodeSequence n246 = null;
  ShutdownXDB n247 = null;
  NodeOptional n248 = new NodeOptional();
  NodeToken n249 = null;
  Token n250 = null;
  NodeSequence n251 = null;
  CreateDatabase n252 = null;
  NodeOptional n253 = new NodeOptional();
  NodeToken n254 = null;
  Token n255 = null;
  NodeSequence n256 = null;
  DropDatabase n257 = null;
  NodeOptional n258 = new NodeOptional();
  NodeToken n259 = null;
  Token n260 = null;
  NodeSequence n261 = null;
  CopyData n262 = null;
  NodeOptional n263 = new NodeOptional();
  NodeToken n264 = null;
  Token n265 = null;
  NodeSequence n266 = null;
  Kill n267 = null;
  NodeOptional n268 = new NodeOptional();
  NodeToken n269 = null;
  Token n270 = null;
  NodeSequence n271 = null;
  Unlisten n272 = null;
  NodeOptional n273 = new NodeOptional();
  NodeToken n274 = null;
  Token n275 = null;
  NodeSequence n276 = null;
  DeclareCursor n277 = null;
  NodeOptional n278 = new NodeOptional();
  NodeToken n279 = null;
  Token n280 = null;
  NodeSequence n281 = null;
  CloseCursor n282 = null;
  NodeOptional n283 = new NodeOptional();
  NodeToken n284 = null;
  Token n285 = null;
  NodeSequence n286 = null;
  FetchCursor n287 = null;
  NodeOptional n288 = new NodeOptional();
  NodeToken n289 = null;
  Token n290 = null;
  NodeSequence n291 = null;
  AlterCluster n292 = null;
  NodeOptional n293 = new NodeOptional();
  NodeToken n294 = null;
  Token n295 = null;
  NodeToken n296 = null;
  Token n297 = null;
}
{
  (
    (
      { n1 = new NodeSequence(2); }
      n2 = VacuumDatabase(prn)
      { n1.addNode(n2); }
      [
        n5 = < SEMICOLON_ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3.addNode(n4); }
      ]
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0, 59); }
    |
      { n6 = new NodeSequence(2); }
      n7 = AnalyzeDatabase(prn)
      { n6.addNode(n7); }
      [
        n10 = < SEMICOLON_ >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n8.addNode(n9); }
      ]
      { n6.addNode(n8); }
      { n0 = new NodeChoice(n6, 1, 59); }
    |
      LOOKAHEAD( 3 )
      { n11 = new NodeSequence(2); }
      n12 = createTable(prn)
      { n11.addNode(n12); }
      [
        n15 = < SEMICOLON_ >
        { n14 = JTBToolkit.makeNodeToken(n15); }
        { n13.addNode(n14); }
      ]
      { n11.addNode(n13); }
      { n0 = new NodeChoice(n11, 2, 59); }
    |
      LOOKAHEAD( 3 )
      { n16 = new NodeSequence(2); }
      n17 = CreateTablespace(prn)
      { n16.addNode(n17); }
      [
        n20 = < SEMICOLON_ >
        { n19 = JTBToolkit.makeNodeToken(n20); }
        { n18.addNode(n19); }
      ]
      { n16.addNode(n18); }
      { n0 = new NodeChoice(n16, 3, 59); }
    |
      LOOKAHEAD( 3 )
      { n21 = new NodeSequence(2); }
      n22 = createIndex(prn)
      { n21.addNode(n22); }
      [
        n25 = < SEMICOLON_ >
        { n24 = JTBToolkit.makeNodeToken(n25); }
        { n23.addNode(n24); }
      ]
      { n21.addNode(n23); }
      { n0 = new NodeChoice(n21, 4, 59); }
    |
      LOOKAHEAD( 3 )
      { n26 = new NodeSequence(2); }
      n27 = dropTable(prn)
      { n26.addNode(n27); }
      [
        n30 = < SEMICOLON_ >
        { n29 = JTBToolkit.makeNodeToken(n30); }
        { n28.addNode(n29); }
      ]
      { n26.addNode(n28); }
      { n0 = new NodeChoice(n26, 5, 59); }
    |
      LOOKAHEAD( 3 )
      { n31 = new NodeSequence(2); }
      n32 = DropTablespace(prn)
      { n31.addNode(n32); }
      [
        n35 = < SEMICOLON_ >
        { n34 = JTBToolkit.makeNodeToken(n35); }
        { n33.addNode(n34); }
      ]
      { n31.addNode(n33); }
      { n0 = new NodeChoice(n31, 6, 59); }
    |
      LOOKAHEAD( 4 )
      { n36 = new NodeSequence(2); }
      n37 = SelectAddGeometryColumn(prn)
      { n36.addNode(n37); }
      [
        n40 = < SEMICOLON_ >
        { n39 = JTBToolkit.makeNodeToken(n40); }
        { n38.addNode(n39); }
      ]
      { n36.addNode(n38); }
      { n0 = new NodeChoice(n36, 7, 59); }
    |
      LOOKAHEAD( 4 )
      { n41 = new NodeSequence(2); }
      n42 = SelectWithParenthesis(prn)
      { n41.addNode(n42); }
      [
        n45 = < SEMICOLON_ >
        { n44 = JTBToolkit.makeNodeToken(n45); }
        { n43.addNode(n44); }
      ]
      { n41.addNode(n43); }
      { n0 = new NodeChoice(n41, 8, 59); }
    |
      LOOKAHEAD( 4 )
      { n46 = new NodeSequence(2); }
      n47 = WithSelect(prn)
      { n46.addNode(n47); }
      [
        n50 = < SEMICOLON_ >
        { n49 = JTBToolkit.makeNodeToken(n50); }
        { n48.addNode(n49); }
      ]
      { n46.addNode(n48); }
      { n0 = new NodeChoice(n46, 9, 59); }
    |
      { n51 = new NodeSequence(2); }
      n52 = InsertTable(prn)
      { n51.addNode(n52); }
      [
        n55 = < SEMICOLON_ >
        { n54 = JTBToolkit.makeNodeToken(n55); }
        { n53.addNode(n54); }
      ]
      { n51.addNode(n53); }
      { n0 = new NodeChoice(n51, 10, 59); }
    |
      LOOKAHEAD( < UPDATE_ > TableName(prn) < SET_ > )
      { n56 = new NodeSequence(2); }
      n57 = UpdateTable(prn)
      { n56.addNode(n57); }
      [
        n60 = < SEMICOLON_ >
        { n59 = JTBToolkit.makeNodeToken(n60); }
        { n58.addNode(n59); }
      ]
      { n56.addNode(n58); }
      { n0 = new NodeChoice(n56, 11, 59); }
    |
      { n61 = new NodeSequence(2); }
      n62 = Delete(prn)
      { n61.addNode(n62); }
      [
        n65 = < SEMICOLON_ >
        { n64 = JTBToolkit.makeNodeToken(n65); }
        { n63.addNode(n64); }
      ]
      { n61.addNode(n63); }
      { n0 = new NodeChoice(n61, 12, 59); }
    |
      LOOKAHEAD( 2 )
      { n66 = new NodeSequence(2); }
      n67 = Alter(prn)
      { n66.addNode(n67); }
      [
        n70 = < SEMICOLON_ >
        { n69 = JTBToolkit.makeNodeToken(n70); }
        { n68.addNode(n69); }
      ]
      { n66.addNode(n68); }
      { n0 = new NodeChoice(n66, 13, 59); }
    |
      LOOKAHEAD( 2 )
      { n71 = new NodeSequence(2); }
      n72 = DropIndex(prn)
      { n71.addNode(n72); }
      [
        n75 = < SEMICOLON_ >
        { n74 = JTBToolkit.makeNodeToken(n75); }
        { n73.addNode(n74); }
      ]
      { n71.addNode(n73); }
      { n0 = new NodeChoice(n71, 14, 59); }
    |
      { n76 = new NodeSequence(2); }
      n77 = RenameTable(prn)
      { n76.addNode(n77); }
      [
        n80 = < SEMICOLON_ >
        { n79 = JTBToolkit.makeNodeToken(n80); }
        { n78.addNode(n79); }
      ]
      { n76.addNode(n78); }
      { n0 = new NodeChoice(n76, 15, 59); }
    |
      { n81 = new NodeSequence(2); }
      n82 = UpdateStats(prn)
      { n81.addNode(n82); }
      [
        n85 = < SEMICOLON_ >
        { n84 = JTBToolkit.makeNodeToken(n85); }
        { n83.addNode(n84); }
      ]
      { n81.addNode(n83); }
      { n0 = new NodeChoice(n81, 16, 59); }
    |
      LOOKAHEAD( 2 )
      { n86 = new NodeSequence(2); }
      n87 = ShowAgents()
      { n86.addNode(n87); }
      [
        n90 = < SEMICOLON_ >
        { n89 = JTBToolkit.makeNodeToken(n90); }
        { n88.addNode(n89); }
      ]
      { n86.addNode(n88); }
      { n0 = new NodeChoice(n86, 17, 59); }
    |
      LOOKAHEAD( 2 )
      { n91 = new NodeSequence(2); }
      n92 = ShowCluster()
      { n91.addNode(n92); }
      [
        n95 = < SEMICOLON_ >
        { n94 = JTBToolkit.makeNodeToken(n95); }
        { n93.addNode(n94); }
      ]
      { n91.addNode(n93); }
      { n0 = new NodeChoice(n91, 18, 59); }
    |
      LOOKAHEAD( 2 )
      { n96 = new NodeSequence(2); }
      n97 = ShowDatabases()
      { n96.addNode(n97); }
      [
        n100 = < SEMICOLON_ >
        { n99 = JTBToolkit.makeNodeToken(n100); }
        { n98.addNode(n99); }
      ]
      { n96.addNode(n98); }
      { n0 = new NodeChoice(n96, 19, 59); }
    |
      LOOKAHEAD( 2 )
      { n101 = new NodeSequence(2); }
      n102 = ShowStatements()
      { n101.addNode(n102); }
      [
        n105 = < SEMICOLON_ >
        { n104 = JTBToolkit.makeNodeToken(n105); }
        { n103.addNode(n104); }
      ]
      { n101.addNode(n103); }
      { n0 = new NodeChoice(n101, 20, 59); }
    |
      LOOKAHEAD( 2 )
      { n106 = new NodeSequence(2); }
      n107 = ShowTables()
      { n106.addNode(n107); }
      [
        n110 = < SEMICOLON_ >
        { n109 = JTBToolkit.makeNodeToken(n110); }
        { n108.addNode(n109); }
      ]
      { n106.addNode(n108); }
      { n0 = new NodeChoice(n106, 21, 59); }
    |
      LOOKAHEAD( 2 )
      { n111 = new NodeSequence(2); }
      n112 = ShowTranIsolation()
      { n111.addNode(n112); }
      [
        n115 = < SEMICOLON_ >
        { n114 = JTBToolkit.makeNodeToken(n115); }
        { n113.addNode(n114); }
      ]
      { n111.addNode(n113); }
      { n0 = new NodeChoice(n111, 22, 59); }
    |
      { n116 = new NodeSequence(2); }
      n117 = BeginTransaction()
      { n116.addNode(n117); }
      [
        n120 = < SEMICOLON_ >
        { n119 = JTBToolkit.makeNodeToken(n120); }
        { n118.addNode(n119); }
      ]
      { n116.addNode(n118); }
      { n0 = new NodeChoice(n116, 23, 59); }
    |
      { n121 = new NodeSequence(2); }
      n122 = CommitTransaction()
      { n121.addNode(n122); }
      [
        n125 = < SEMICOLON_ >
        { n124 = JTBToolkit.makeNodeToken(n125); }
        { n123.addNode(n124); }
      ]
      { n121.addNode(n123); }
      { n0 = new NodeChoice(n121, 24, 59); }
    |
      { n126 = new NodeSequence(2); }
      n127 = RollbackTransaction()
      { n126.addNode(n127); }
      [
        n130 = < SEMICOLON_ >
        { n129 = JTBToolkit.makeNodeToken(n130); }
        { n128.addNode(n129); }
      ]
      { n126.addNode(n128); }
      { n0 = new NodeChoice(n126, 25, 59); }
    |
      { n131 = new NodeSequence(2); }
      n132 = DescribeTable(prn)
      { n131.addNode(n132); }
      [
        n135 = < SEMICOLON_ >
        { n134 = JTBToolkit.makeNodeToken(n135); }
        { n133.addNode(n134); }
      ]
      { n131.addNode(n133); }
      { n0 = new NodeChoice(n131, 26, 59); }
    |
      LOOKAHEAD( 2 )
      { n136 = new NodeSequence(2); }
      n137 = ShowConstraints(prn)
      { n136.addNode(n137); }
      [
        n140 = < SEMICOLON_ >
        { n139 = JTBToolkit.makeNodeToken(n140); }
        { n138.addNode(n139); }
      ]
      { n136.addNode(n138); }
      { n0 = new NodeChoice(n136, 27, 59); }
    |
      LOOKAHEAD( 2 )
      { n141 = new NodeSequence(2); }
      n142 = ShowIndexes(prn)
      { n141.addNode(n142); }
      [
        n145 = < SEMICOLON_ >
        { n144 = JTBToolkit.makeNodeToken(n145); }
        { n143.addNode(n144); }
      ]
      { n141.addNode(n143); }
      { n0 = new NodeChoice(n141, 28, 59); }
    |
      LOOKAHEAD( 3 )
      { n146 = new NodeSequence(2); }
      n147 = Deallocate(prn)
      { n146.addNode(n147); }
      [
        n150 = < SEMICOLON_ >
        { n149 = JTBToolkit.makeNodeToken(n150); }
        { n148.addNode(n149); }
      ]
      { n146.addNode(n148); }
      { n0 = new NodeChoice(n146, 29, 59); }
    |
      LOOKAHEAD( 3 )
      { n151 = new NodeSequence(2); }
      n152 = CreateUser(prn)
      { n151.addNode(n152); }
      [
        n155 = < SEMICOLON_ >
        { n154 = JTBToolkit.makeNodeToken(n155); }
        { n153.addNode(n154); }
      ]
      { n151.addNode(n153); }
      { n0 = new NodeChoice(n151, 30, 59); }
    |
      LOOKAHEAD( 3 )
      { n156 = new NodeSequence(2); }
      n157 = DropUser(prn)
      { n156.addNode(n157); }
      [
        n160 = < SEMICOLON_ >
        { n159 = JTBToolkit.makeNodeToken(n160); }
        { n158.addNode(n159); }
      ]
      { n156.addNode(n158); }
      { n0 = new NodeChoice(n156, 31, 59); }
    |
      LOOKAHEAD( 3 )
      { n161 = new NodeSequence(2); }
      n162 = AlterUser(prn)
      { n161.addNode(n162); }
      [
        n165 = < SEMICOLON_ >
        { n164 = JTBToolkit.makeNodeToken(n165); }
        { n163.addNode(n164); }
      ]
      { n161.addNode(n163); }
      { n0 = new NodeChoice(n161, 32, 59); }
    |
      { n166 = new NodeSequence(2); }
      n167 = Grant(prn)
      { n166.addNode(n167); }
      [
        n170 = < SEMICOLON_ >
        { n169 = JTBToolkit.makeNodeToken(n170); }
        { n168.addNode(n169); }
      ]
      { n166.addNode(n168); }
      { n0 = new NodeChoice(n166, 33, 59); }
    |
      { n171 = new NodeSequence(2); }
      n172 = Revoke(prn)
      { n171.addNode(n172); }
      [
        n175 = < SEMICOLON_ >
        { n174 = JTBToolkit.makeNodeToken(n175); }
        { n173.addNode(n174); }
      ]
      { n171.addNode(n173); }
      { n0 = new NodeChoice(n171, 34, 59); }
    |
      { n176 = new NodeSequence(2); }
      n177 = createView(prn)
      { n176.addNode(n177); }
      [
        n180 = < SEMICOLON_ >
        { n179 = JTBToolkit.makeNodeToken(n180); }
        { n178.addNode(n179); }
      ]
      { n176.addNode(n178); }
      { n0 = new NodeChoice(n176, 35, 59); }
    |
      { n181 = new NodeSequence(2); }
      n182 = DropView(prn)
      { n181.addNode(n182); }
      [
        n185 = < SEMICOLON_ >
        { n184 = JTBToolkit.makeNodeToken(n185); }
        { n183.addNode(n184); }
      ]
      { n181.addNode(n183); }
      { n0 = new NodeChoice(n181, 36, 59); }
    |
      LOOKAHEAD( 2 )
      { n186 = new NodeSequence(2); }
      n187 = ShowUsers(prn)
      { n186.addNode(n187); }
      [
        n190 = < SEMICOLON_ >
        { n189 = JTBToolkit.makeNodeToken(n190); }
        { n188.addNode(n189); }
      ]
      { n186.addNode(n188); }
      { n0 = new NodeChoice(n186, 37, 59); }
    |
      LOOKAHEAD( 2 )
      { n191 = new NodeSequence(2); }
      n192 = ShowViews(prn)
      { n191.addNode(n192); }
      [
        n195 = < SEMICOLON_ >
        { n194 = JTBToolkit.makeNodeToken(n195); }
        { n193.addNode(n194); }
      ]
      { n191.addNode(n193); }
      { n0 = new NodeChoice(n191, 38, 59); }
    |
      { n196 = new NodeSequence(2); }
      n197 = Cluster(prn)
      { n196.addNode(n197); }
      [
        n200 = < SEMICOLON_ >
        { n199 = JTBToolkit.makeNodeToken(n200); }
        { n198.addNode(n199); }
      ]
      { n196.addNode(n198); }
      { n0 = new NodeChoice(n196, 39, 59); }
    |
      { n201 = new NodeSequence(2); }
      n202 = Truncate(prn)
      { n201.addNode(n202); }
      [
        n205 = < SEMICOLON_ >
        { n204 = JTBToolkit.makeNodeToken(n205); }
        { n203.addNode(n204); }
      ]
      { n201.addNode(n203); }
      { n0 = new NodeChoice(n201, 40, 59); }
    |
      { n206 = new NodeSequence(2); }
      n207 = ExecDirect(prn)
      { n206.addNode(n207); }
      [
        n210 = < SEMICOLON_ >
        { n209 = JTBToolkit.makeNodeToken(n210); }
        { n208.addNode(n209); }
      ]
      { n206.addNode(n208); }
      { n0 = new NodeChoice(n206, 41, 59); }
    |
      { n211 = new NodeSequence(2); }
      n212 = Explain(prn)
      { n211.addNode(n212); }
      [
        n215 = < SEMICOLON_ >
        { n214 = JTBToolkit.makeNodeToken(n215); }
        { n213.addNode(n214); }
      ]
      { n211.addNode(n213); }
      { n0 = new NodeChoice(n211, 42, 59); }
    |
      LOOKAHEAD( 2 )
      { n216 = new NodeSequence(2); }
      n217 = SetProperty(prn)
      { n216.addNode(n217); }
      [
        n220 = < SEMICOLON_ >
        { n219 = JTBToolkit.makeNodeToken(n220); }
        { n218.addNode(n219); }
      ]
      { n216.addNode(n218); }
      { n0 = new NodeChoice(n216, 43, 59); }
    |
      LOOKAHEAD( 2 )
      { n221 = new NodeSequence(2); }
      n222 = ShowProperty(prn)
      { n221.addNode(n222); }
      [
        n225 = < SEMICOLON_ >
        { n224 = JTBToolkit.makeNodeToken(n225); }
        { n223.addNode(n224); }
      ]
      { n221.addNode(n223); }
      { n0 = new NodeChoice(n221, 44, 59); }
    |
      { n226 = new NodeSequence(2); }
      n227 = AddNodeToDB(prn)
      { n226.addNode(n227); }
      [
        n230 = < SEMICOLON_ >
        { n229 = JTBToolkit.makeNodeToken(n230); }
        { n228.addNode(n229); }
      ]
      { n226.addNode(n228); }
      { n0 = new NodeChoice(n226, 45, 59); }
    |
      { n231 = new NodeSequence(2); }
      n232 = DropNodeFromDB(prn)
      { n231.addNode(n232); }
      [
        n235 = < SEMICOLON_ >
        { n234 = JTBToolkit.makeNodeToken(n235); }
        { n233.addNode(n234); }
      ]
      { n231.addNode(n233); }
      { n0 = new NodeChoice(n231, 46, 59); }
    |
      { n236 = new NodeSequence(2); }
      n237 = StartDatabase(prn)
      { n236.addNode(n237); }
      [
        n240 = < SEMICOLON_ >
        { n239 = JTBToolkit.makeNodeToken(n240); }
        { n238.addNode(n239); }
      ]
      { n236.addNode(n238); }
      { n0 = new NodeChoice(n236, 47, 59); }
    |
      { n241 = new NodeSequence(2); }
      n242 = StopDatabase(prn)
      { n241.addNode(n242); }
      [
        n245 = < SEMICOLON_ >
        { n244 = JTBToolkit.makeNodeToken(n245); }
        { n243.addNode(n244); }
      ]
      { n241.addNode(n243); }
      { n0 = new NodeChoice(n241, 48, 59); }
    |
      { n246 = new NodeSequence(2); }
      n247 = ShutdownXDB(prn)
      { n246.addNode(n247); }
      [
        n250 = < SEMICOLON_ >
        { n249 = JTBToolkit.makeNodeToken(n250); }
        { n248.addNode(n249); }
      ]
      { n246.addNode(n248); }
      { n0 = new NodeChoice(n246, 49, 59); }
    |
      { n251 = new NodeSequence(2); }
      n252 = CreateDatabase(prn)
      { n251.addNode(n252); }
      [
        n255 = < SEMICOLON_ >
        { n254 = JTBToolkit.makeNodeToken(n255); }
        { n253.addNode(n254); }
      ]
      { n251.addNode(n253); }
      { n0 = new NodeChoice(n251, 50, 59); }
    |
      { n256 = new NodeSequence(2); }
      n257 = DropDatabase(prn)
      { n256.addNode(n257); }
      [
        n260 = < SEMICOLON_ >
        { n259 = JTBToolkit.makeNodeToken(n260); }
        { n258.addNode(n259); }
      ]
      { n256.addNode(n258); }
      { n0 = new NodeChoice(n256, 51, 59); }
    |
      { n261 = new NodeSequence(2); }
      n262 = CopyData(prn)
      { n261.addNode(n262); }
      [
        n265 = < SEMICOLON_ >
        { n264 = JTBToolkit.makeNodeToken(n265); }
        { n263.addNode(n264); }
      ]
      { n261.addNode(n263); }
      { n0 = new NodeChoice(n261, 52, 59); }
    |
      { n266 = new NodeSequence(2); }
      n267 = Kill(prn)
      { n266.addNode(n267); }
      [
        n270 = < SEMICOLON_ >
        { n269 = JTBToolkit.makeNodeToken(n270); }
        { n268.addNode(n269); }
      ]
      { n266.addNode(n268); }
      { n0 = new NodeChoice(n266, 53, 59); }
    |
      { n271 = new NodeSequence(2); }
      n272 = Unlisten(prn)
      { n271.addNode(n272); }
      [
        n275 = < SEMICOLON_ >
        { n274 = JTBToolkit.makeNodeToken(n275); }
        { n273.addNode(n274); }
      ]
      { n271.addNode(n273); }
      { n0 = new NodeChoice(n271, 54, 59); }
    |
      { n276 = new NodeSequence(2); }
      n277 = DeclareCursor(prn)
      { n276.addNode(n277); }
      [
        n280 = < SEMICOLON_ >
        { n279 = JTBToolkit.makeNodeToken(n280); }
        { n278.addNode(n279); }
      ]
      { n276.addNode(n278); }
      { n0 = new NodeChoice(n276, 55, 59); }
    |
      { n281 = new NodeSequence(2); }
      n282 = CloseCursor(prn)
      { n281.addNode(n282); }
      [
        n285 = < SEMICOLON_ >
        { n284 = JTBToolkit.makeNodeToken(n285); }
        { n283.addNode(n284); }
      ]
      { n281.addNode(n283); }
      { n0 = new NodeChoice(n281, 56, 59); }
    |
      { n286 = new NodeSequence(2); }
      n287 = FetchCursor(prn)
      { n286.addNode(n287); }
      [
        n290 = < SEMICOLON_ >
        { n289 = JTBToolkit.makeNodeToken(n290); }
        { n288.addNode(n289); }
      ]
      { n286.addNode(n288); }
      { n0 = new NodeChoice(n286, 57, 59); }
    |
      { n291 = new NodeSequence(2); }
      n292 = AlterCluster(prn)
      { n291.addNode(n292); }
      [
        n295 = < SEMICOLON_ >
        { n294 = JTBToolkit.makeNodeToken(n295); }
        { n293.addNode(n294); }
      ]
      { n291.addNode(n293); }
      { n0 = new NodeChoice(n291, 58, 59); }
    )
    
  )
  n297 = < EOF > {
    n297.beginColumn++;
    n297.endColumn++;
    { n296 = JTBToolkit.makeNodeToken(n297); }
  }
  { return new process(n0, n296); }
}

CopyData CopyData(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  TableName n4 = null;
  NodeOptional n5 = new NodeOptional();
  ColumnNameListWithParenthesis n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Select n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeChoice n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeChoice n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeChoice n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeOptional n30 = new NodeOptional();
  NodeSequence n31 = null;
  NodeOptional n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeList n35 = null;
  NodeChoice n36 = null;
  FormatDefOIDS n37 = null;
  FormatDefDelimiter n38 = null;
  FormatDefNull n39 = null;
  FormatDefCSV n40 = null;
}
{
  n1 = < COPY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      { n3 = new NodeSequence(2); }
      n4 = TableName(prn)
      { n3.addNode(n4); }
      [
        n6 = ColumnNameListWithParenthesis(prn)
        { n5.addNode(n6); }
      ]
      { n3.addNode(n5); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      { n7 = new NodeSequence(3); }
      n9 = < PARENTHESIS_START_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10 = Select(prn)
      { n7.addNode(n10); }
      n12 = < PARENTHESIS_CLOSE_ >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n7.addNode(n11); }
      { n2 = new NodeChoice(n7, 1, 2); }
    )
    
  )
  (
    (
      { n14 = new NodeSequence(2); }
      n16 = < FROM_ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
        (
          n19 = < STDIN_ >
          { n18 = JTBToolkit.makeNodeToken(n19); }
          { n17 = new NodeChoice(n18, 0, 2); }
        |
          n21 = < STRING_LITERAL >
          { n20 = JTBToolkit.makeNodeToken(n21); }
          { n17 = new NodeChoice(n20, 1, 2); }
        )
        
      )
      { n14.addNode(n17); }
      { n13 = new NodeChoice(n14, 0, 2); }
    |
      { n22 = new NodeSequence(2); }
      n24 = < TO_ >
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      (
        (
          n27 = < STDOUT_ >
          { n26 = JTBToolkit.makeNodeToken(n27); }
          { n25 = new NodeChoice(n26, 0, 2); }
        |
          n29 = < STRING_LITERAL >
          { n28 = JTBToolkit.makeNodeToken(n29); }
          { n25 = new NodeChoice(n28, 1, 2); }
        )
        
      )
      { n22.addNode(n25); }
      { n13 = new NodeChoice(n22, 1, 2); }
    )
    
  )
  [
    { n32 = new NodeOptional(); }
    { n35 = new NodeList(); }
    { n31 = new NodeSequence(2); }
    [
      n34 = < WITH_ >
      { n33 = JTBToolkit.makeNodeToken(n34); }
      { n32.addNode(n33); }
    ]
    { n31.addNode(n32); }
    (
      (
        n37 = FormatDefOIDS(prn)
        { n36 = new NodeChoice(n37, 0, 4); }
      |
        n38 = FormatDefDelimiter(prn)
        { n36 = new NodeChoice(n38, 1, 4); }
      |
        n39 = FormatDefNull(prn)
        { n36 = new NodeChoice(n39, 2, 4); }
      |
        n40 = FormatDefCSV(prn)
        { n36 = new NodeChoice(n40, 3, 4); }
      )
      { n35.addNode(n36); }
    )+
    { n35.nodes.trimToSize(); }
    { n31.addNode(n35); }
    { n30.addNode(n31); }
  ]
  { return new CopyData(n0, n2, n13, n30); }
}

FormatDefOIDS FormatDefOIDS(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < OIDS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new FormatDefOIDS(n0); }
}

FormatDefDelimiter FormatDefDelimiter(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < DELIMITER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < AS_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n6 = < STRING_LITERAL >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new FormatDefDelimiter(n0, n2, n5); }
}

FormatDefNull FormatDefNull(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < NULL_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < AS_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n6 = < STRING_LITERAL >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new FormatDefNull(n0, n2, n5); }
}

FormatDefCSV FormatDefCSV(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeOptional n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  ColumnNameList n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  ColumnNameList n27 = null;
}
{
  n1 = < CSV_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    { n7 = new NodeOptional(); }
    { n15 = new NodeOptional(); }
    (
      { n4 = new NodeSequence(3); }
      n6 = < QUOTE_STRING_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      [
        n9 = < AS_ >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n7.addNode(n8); }
      ]
      { n4.addNode(n7); }
      n11 = < STRING_LITERAL >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n4.addNode(n10); }
      { n3 = new NodeChoice(n4, 0, 4); }
    |
      { n12 = new NodeSequence(3); }
      n14 = < ESCAPE_ >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      [
        n17 = < AS_ >
        { n16 = JTBToolkit.makeNodeToken(n17); }
        { n15.addNode(n16); }
      ]
      { n12.addNode(n15); }
      n19 = < STRING_LITERAL >
      { n18 = JTBToolkit.makeNodeToken(n19); }
      { n12.addNode(n18); }
      { n3 = new NodeChoice(n12, 1, 4); }
    |
      { n20 = new NodeSequence(2); }
      n22 = < FORCE_QUOTE_ >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n23 = ColumnNameList(prn)
      { n20.addNode(n23); }
      { n3 = new NodeChoice(n20, 2, 4); }
    |
      { n24 = new NodeSequence(2); }
      n26 = < FORCE_NOT_NULL_ >
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
      n27 = ColumnNameList(prn)
      { n24.addNode(n27); }
      { n3 = new NodeChoice(n24, 3, 4); }
    )
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new FormatDefCSV(n0, n2); }
}

AddNodeToDB AddNodeToDB(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n1 = < ADD_NODE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    { n5 = new NodeSequence(2); }
    n7 = ","
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    n9 = < INT_LITERAL >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n5.addNode(n8); }
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  [
    n12 = < MANUAL_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n10.addNode(n11); }
  ]
  { return new AddNodeToDB(n0, n2, n4, n10); }
}

DropNodeFromDB DropNodeFromDB(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n1 = < DROP_NODE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    { n5 = new NodeSequence(2); }
    n7 = ","
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    n9 = < INT_LITERAL >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n5.addNode(n8); }
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  [
    n12 = < FORCE_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n10.addNode(n11); }
  ]
  { return new DropNodeFromDB(n0, n2, n4, n10); }
}

StartDatabase StartDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = < START_DB_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = Identifier(prn)
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  [
    { n9 = new NodeSequence(2); }
    n11 = < WAIT_TIMEOUT_ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n9.addNode(n10); }
    n13 = < INT_LITERAL >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n9.addNode(n12); }
    { n8.addNode(n9); }
  ]
  { return new StartDatabase(n0, n2, n3, n8); }
}

StopDatabase StopDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
}
{
  n1 = < STOP_DB_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = Identifier(prn)
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { return new StopDatabase(n0, n2, n3); }
}

ShutdownXDB ShutdownXDB(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < SHUT_DOWN_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < FORCE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  { return new ShutdownXDB(n0, n2); }
}

CreateDatabase CreateDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeOptional n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeList n8 = null;
  NodeChoice n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Identifier n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = new NodeOptional();
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeChoice n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeListOptional n31 = new NodeListOptional();
  NodeSequence n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
}
{
  n1 = < CREATE_DB_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  [
    { n5 = new NodeOptional(); }
    { n8 = new NodeList(); }
    { n4 = new NodeSequence(2); }
    [
      n7 = < WITH_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
    ]
    { n4.addNode(n5); }
    (
      { n13 = new NodeOptional(); }
      (
        { n10 = new NodeSequence(3); }
        n12 = < OWNER_ >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n10.addNode(n11); }
        [
          n15 = "="
          { n14 = JTBToolkit.makeNodeToken(n15); }
          { n13.addNode(n14); }
        ]
        { n10.addNode(n13); }
        n16 = Identifier(prn)
        { n10.addNode(n16); }
        { n9 = new NodeChoice(n10, 0, 2); }
      |
        n18 = < SPATIAL_ >
        { n17 = JTBToolkit.makeNodeToken(n18); }
        { n9 = new NodeChoice(n17, 1, 2); }
      )
      { n8.addNode(n9); }
    )+
    { n8.nodes.trimToSize(); }
    { n4.addNode(n8); }
    { n3.addNode(n4); }
  ]
  [
    n21 = < MANUAL_ >
    { n20 = JTBToolkit.makeNodeToken(n21); }
    { n19.addNode(n20); }
  ]
  n23 = < ON_ >
  { n22 = JTBToolkit.makeNodeToken(n23); }
  (
    (
      n26 = < NODE_ >
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24 = new NodeChoice(n25, 0, 2); }
    |
      n28 = < NODES_ >
      { n27 = JTBToolkit.makeNodeToken(n28); }
      { n24 = new NodeChoice(n27, 1, 2); }
    )
    
  )
  n30 = < INT_LITERAL >
  { n29 = JTBToolkit.makeNodeToken(n30); }
  (
    { n32 = new NodeSequence(2); }
    n34 = ","
    { n33 = JTBToolkit.makeNodeToken(n34); }
    { n32.addNode(n33); }
    n36 = < INT_LITERAL >
    { n35 = JTBToolkit.makeNodeToken(n36); }
    { n32.addNode(n35); }
    { n31.addNode(n32); }
  )*
  { n31.nodes.trimToSize(); }
  { return new CreateDatabase(n0, n2, n3, n19, n22, n24, n29, n31); }
}

DropDatabase DropDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < DROP_DB_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  [
    n5 = < FORCE_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
  ]
  { return new DropDatabase(n0, n2, n3); }
}

CreateNode CreateNode(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeOptional n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeList n10 = null;
  NodeChoice n11 = null;
  FormatDefPort n12 = null;
  FormatDefUser n13 = null;
  FormatDefPassword n14 = null;
}
{
  n1 = < CREATE_NODE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < FOR_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  [
    { n7 = new NodeOptional(); }
    { n10 = new NodeList(); }
    { n6 = new NodeSequence(2); }
    [
      n9 = < WITH_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
    ]
    { n6.addNode(n7); }
    (
      (
        n12 = FormatDefPort(prn)
        { n11 = new NodeChoice(n12, 0, 3); }
      |
        n13 = FormatDefUser(prn)
        { n11 = new NodeChoice(n13, 1, 3); }
      |
        n14 = FormatDefPassword(prn)
        { n11 = new NodeChoice(n14, 2, 3); }
      )
      { n10.addNode(n11); }
    )+
    { n10.nodes.trimToSize(); }
    { n6.addNode(n10); }
    { n5.addNode(n6); }
  ]
  { return new CreateNode(n0, n2, n4, n5); }
}

FormatDefPort FormatDefPort(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < PORT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = "="
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n6 = < INT_LITERAL >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new FormatDefPort(n0, n2, n5); }
}

FormatDefUser FormatDefUser(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
}
{
  n1 = < USER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = "="
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n5 = Identifier(prn)
  { return new FormatDefUser(n0, n2, n5); }
}

FormatDefPassword FormatDefPassword(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
}
{
  n1 = < PASSWORD_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = "="
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n5 = Identifier(prn)
  { return new FormatDefPassword(n0, n2, n5); }
}

ExecDirect ExecDirect(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeChoice n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeListOptional n17 = new NodeListOptional();
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
}
{
  n1 = < EXEC_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < DIRECT_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < ON_ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    (
      n8 = < ALL_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6 = new NodeChoice(n7, 0, 2); }
    |
      { n9 = new NodeSequence(3); }
      (
        (
          n12 = < NODE_ >
          { n11 = JTBToolkit.makeNodeToken(n12); }
          { n10 = new NodeChoice(n11, 0, 2); }
        |
          n14 = < NODES_ >
          { n13 = JTBToolkit.makeNodeToken(n14); }
          { n10 = new NodeChoice(n13, 1, 2); }
        )
        
      )
      { n9.addNode(n10); }
      n16 = < INT_LITERAL >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n9.addNode(n15); }
      (
        { n18 = new NodeSequence(2); }
        n20 = ","
        { n19 = JTBToolkit.makeNodeToken(n20); }
        { n18.addNode(n19); }
        n22 = < INT_LITERAL >
        { n21 = JTBToolkit.makeNodeToken(n22); }
        { n18.addNode(n21); }
        { n17.addNode(n18); }
      )*
      { n17.nodes.trimToSize(); }
      { n9.addNode(n17); }
      { n6 = new NodeChoice(n9, 1, 2); }
    )
    
  )
  n24 = < STRING_LITERAL >
  { n23 = JTBToolkit.makeNodeToken(n24); }
  { return new ExecDirect(n0, n2, n4, n6, n23); }
}

Explain Explain(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  Select n6 = null;
  WithSelect n7 = null;
}
{
  n1 = < EXPLAIN_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < VERBOSE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  (
    (
      n6 = Select(prn)
      { n5 = new NodeChoice(n6, 0, 2); }
    |
      n7 = WithSelect(prn)
      { n5 = new NodeChoice(n7, 1, 2); }
    )
    
  )
  { return new Explain(n0, n2, n5); }
}

VacuumDatabase VacuumDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeChoice n9 = null;
  TableName n10 = null;
  AnalyzeDatabase n11 = null;
}
{
  n1 = < VACUUM_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    (
      n5 = < FULL_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n7 = < FREEZE_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3 = new NodeChoice(n6, 1, 2); }
    )
    { n2.addNode(n3); }
  ]
  [
    (
      n10 = TableName(prn)
      { n9 = new NodeChoice(n10, 0, 2); }
    |
      n11 = AnalyzeDatabase(prn)
      { n9 = new NodeChoice(n11, 1, 2); }
    )
    { n8.addNode(n9); }
  ]
  { return new VacuumDatabase(n0, n2, n8); }
}

AnalyzeDatabase AnalyzeDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  TableName n4 = null;
  NodeOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  ColumnNameList n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < ANALYZE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n5 = new NodeOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = TableName(prn)
    { n3.addNode(n4); }
    [
      { n6 = new NodeSequence(3); }
      n8 = < PARENTHESIS_START_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = ColumnNameList(prn)
      { n6.addNode(n9); }
      n11 = < PARENTHESIS_CLOSE_ >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      { n5.addNode(n6); }
    ]
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  { return new AnalyzeDatabase(n0, n2); }
}

CreateTablespace CreateTablespace(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
  TablespaceLocation n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  TablespaceLocation n10 = null;
}
{
  n1 = < CREATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < TABLESPACE_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  n5 = TablespaceLocation(prn)
  (
    { n7 = new NodeSequence(2); }
    n9 = ","
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
    n10 = TablespaceLocation(prn)
    { n7.addNode(n10); }
    { n6.addNode(n7); }
  )*
  { n6.nodes.trimToSize(); }
  { return new CreateTablespace(n0, n2, n4, n5, n6); }
}

DropTablespace DropTablespace(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < TABLESPACE_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  { return new DropTablespace(n0, n2, n4); }
}

TablespaceLocation TablespaceLocation(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  stringLiteral n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeListOptional n16 = new NodeListOptional();
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
}
{
  n1 = < LOCATION_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = stringLiteral(prn)
  n4 = < ON_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    (
      n7 = < ALL_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5 = new NodeChoice(n6, 0, 2); }
    |
      { n8 = new NodeSequence(3); }
      (
        (
          n11 = < NODE_ >
          { n10 = JTBToolkit.makeNodeToken(n11); }
          { n9 = new NodeChoice(n10, 0, 2); }
        |
          n13 = < NODES_ >
          { n12 = JTBToolkit.makeNodeToken(n13); }
          { n9 = new NodeChoice(n12, 1, 2); }
        )
        
      )
      { n8.addNode(n9); }
      n15 = < INT_LITERAL >
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n8.addNode(n14); }
      (
        LOOKAHEAD( 2 )
        { n17 = new NodeSequence(2); }
        n19 = ","
        { n18 = JTBToolkit.makeNodeToken(n19); }
        { n17.addNode(n18); }
        n21 = < INT_LITERAL >
        { n20 = JTBToolkit.makeNodeToken(n21); }
        { n17.addNode(n20); }
        { n16.addNode(n17); }
      )*
      { n16.nodes.trimToSize(); }
      { n8.addNode(n16); }
      { n5 = new NodeChoice(n8, 1, 2); }
    )
    
  )
  { return new TablespaceLocation(n0, n2, n3, n5); }
}

UpdateStats UpdateStats(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeChoice n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  ColumnNameList n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  TableName n22 = null;
  TableName n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
}
{
  n1 = < UPDATE_STAT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      { n3 = new NodeSequence(4); }
      n5 = < COLUMN_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      (
        (
          LOOKAHEAD( 2 )
          { n7 = new NodeSequence(3); }
          n9 = < PARENTHESIS_START_ >
          { n8 = JTBToolkit.makeNodeToken(n9); }
          { n7.addNode(n8); }
          n11 = < STAR_ >
          { n10 = JTBToolkit.makeNodeToken(n11); }
          { n7.addNode(n10); }
          n13 = < PARENTHESIS_CLOSE_ >
          { n12 = JTBToolkit.makeNodeToken(n13); }
          { n7.addNode(n12); }
          { n6 = new NodeChoice(n7, 0, 2); }
        |
          { n14 = new NodeSequence(3); }
          n16 = < PARENTHESIS_START_ >
          { n15 = JTBToolkit.makeNodeToken(n16); }
          { n14.addNode(n15); }
          n17 = ColumnNameList(prn)
          { n14.addNode(n17); }
          n19 = < PARENTHESIS_CLOSE_ >
          { n18 = JTBToolkit.makeNodeToken(n19); }
          { n14.addNode(n18); }
          { n6 = new NodeChoice(n14, 1, 2); }
        )
        
      )
      { n3.addNode(n6); }
      n21 = < FOR_ >
      { n20 = JTBToolkit.makeNodeToken(n21); }
      { n3.addNode(n20); }
      n22 = TableName(prn)
      { n3.addNode(n22); }
      { n2 = new NodeChoice(n3, 0, 3); }
    |
      n23 = TableName(prn)
      { n2 = new NodeChoice(n23, 1, 3); }
    |
      n25 = < STAR_ >
      { n24 = JTBToolkit.makeNodeToken(n25); }
      { n2 = new NodeChoice(n24, 2, 3); }
    )
    
  )
  { return new UpdateStats(n0, n2); }
}

RenameTable RenameTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TableName n7 = null;
}
{
  n1 = < RENAME_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < TABLE_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  n6 = < TO_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = TableName(prn)
  { return new RenameTable(n0, n2, n4, n5, n7); }
}

//ok
DropIndex DropIndex(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  TableName n9 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INDEX_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  [
    { n6 = new NodeSequence(2); }
    n8 = < ON_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n9 = TableName(prn)
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  ]
  { return new DropIndex(n0, n2, n4, n5); }
}

Alter Alter(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  AlterTable n3 = null;
  AlterTableSpace n4 = null;
}
{
  n1 = < ALTER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n3 = AlterTable(prn)
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n4 = AlterTableSpace(prn)
      { n2 = new NodeChoice(n4, 1, 2); }
    )
    
  )
  { return new Alter(n0, n2); }
}

AlterTableSpace AlterTableSpace(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
}
{
  n1 = < TABLESPACE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  n4 = < RENAME_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = < TO_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Identifier(prn)
  { return new AlterTableSpace(n0, n2, n3, n5, n7); }
}

AlterTable AlterTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TableName n2 = null;
  AlterTableActon n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  AlterTableActon n8 = null;
}
{
  n1 = < TABLE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = TableName(prn)
  n3 = AlterTableActon(prn)
  (
    { n5 = new NodeSequence(2); }
    n7 = ","
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    n8 = AlterTableActon(prn)
    { n5.addNode(n8); }
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  { return new AlterTable(n0, n2, n3, n4); }
}

AlterTableActon AlterTableActon(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  AddDef n1 = null;
  DropDef n2 = null;
  AlterDef n3 = null;
  RenameDef n4 = null;
  OwnerDef n5 = null;
  SetTablespace n6 = null;
  Inherit n7 = null;
}
{
  (
    n1 = AddDef(prn)
    { n0 = new NodeChoice(n1, 0, 7); }
  |
    n2 = DropDef(prn)
    { n0 = new NodeChoice(n2, 1, 7); }
  |
    n3 = AlterDef(prn)
    { n0 = new NodeChoice(n3, 2, 7); }
  |
    n4 = RenameDef(prn)
    { n0 = new NodeChoice(n4, 3, 7); }
  |
    n5 = OwnerDef(prn)
    { n0 = new NodeChoice(n5, 4, 7); }
  |
    n6 = SetTablespace(prn)
    { n0 = new NodeChoice(n6, 5, 7); }
  |
    n7 = Inherit(prn)
    { n0 = new NodeChoice(n7, 6, 7); }
  )
  { return new AlterTableActon(n0); }
}

Inherit Inherit(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  TableName n5 = null;
}
{
  [
    n2 = < NO_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n4 = < INHERIT_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = TableName(prn)
  { return new Inherit(n0, n3, n5); }
}

SetTablespace SetTablespace(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
}
{
  n1 = < SET_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < TABLESPACE_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  { return new SetTablespace(n0, n2, n4); }
}

SetProperty SetProperty(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  Identifier n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeChoice n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  Identifier n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  IsolationLevel n32 = null;
}
{
  n1 = < SET_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      { n3 = new NodeSequence(3); }
      n4 = Identifier(prn)
      { n3.addNode(n4); }
      [
        (
          n8 = < TO_ >
          { n7 = JTBToolkit.makeNodeToken(n8); }
          { n6 = new NodeChoice(n7, 0, 2); }
        |
          n10 = "="
          { n9 = JTBToolkit.makeNodeToken(n10); }
          { n6 = new NodeChoice(n9, 1, 2); }
        )
        { n5.addNode(n6); }
      ]
      { n3.addNode(n5); }
      (
        (
          n13 = < STRING_LITERAL >
          { n12 = JTBToolkit.makeNodeToken(n13); }
          { n11 = new NodeChoice(n12, 0, 8); }
        |
          n14 = Identifier(prn)
          { n11 = new NodeChoice(n14, 1, 8); }
        |
          n16 = < ON_ >
          { n15 = JTBToolkit.makeNodeToken(n16); }
          { n11 = new NodeChoice(n15, 2, 8); }
        |
          n18 = < TRUE_ >
          { n17 = JTBToolkit.makeNodeToken(n18); }
          { n11 = new NodeChoice(n17, 3, 8); }
        |
          n20 = < FALSE_ >
          { n19 = JTBToolkit.makeNodeToken(n20); }
          { n11 = new NodeChoice(n19, 4, 8); }
        |
          n22 = < INT_LITERAL >
          { n21 = JTBToolkit.makeNodeToken(n22); }
          { n11 = new NodeChoice(n21, 5, 8); }
        |
          n24 = < DECIMAL_LITERAL >
          { n23 = JTBToolkit.makeNodeToken(n24); }
          { n11 = new NodeChoice(n23, 6, 8); }
        |
          n26 = < ESCAPE_ >
          { n25 = JTBToolkit.makeNodeToken(n26); }
          { n11 = new NodeChoice(n25, 7, 8); }
        )
        
      )
      { n3.addNode(n11); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      { n27 = new NodeSequence(3); }
      n29 = < TRANSACTION_ >
      { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
      n31 = < ISOLATION_LEVEL_ >
      { n30 = JTBToolkit.makeNodeToken(n31); }
      { n27.addNode(n30); }
      n32 = IsolationLevel(prn)
      { n27.addNode(n32); }
      { n2 = new NodeChoice(n27, 1, 2); }
    )
    
  )
  { return new SetProperty(n0, n2); }
}

IsolationLevel IsolationLevel(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  (
    (
      n2 = < SERIALIZABLE_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 4); }
    |
      n4 = < REPEATABLE_READ_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 4); }
    |
      n6 = < READ_COMMITTED_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 4); }
    |
      n8 = < READ_UNCOMMITTED_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 4); }
    )
    
  )
  { return new IsolationLevel(n0); }
}

ShowProperty ShowProperty(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < SHOW_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < IDENTIFIER >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 3); }
    |
      n6 = < ALL_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2 = new NodeChoice(n5, 1, 3); }
    |
      n8 = < QUOTED_IDENTIFIER >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n2 = new NodeChoice(n7, 2, 3); }
    )
    
  )
  { return new ShowProperty(n0, n2); }
}

OwnerDef OwnerDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
}
{
  n1 = < OWNER_TO_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < PUBLIC_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n5 = Identifier(prn)
      { n2 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  { return new OwnerDef(n0, n2); }
}

Constraint Constraint(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
}
{
  n1 = < CONSTRAINT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  { return new Constraint(n0, n2); }
}

AddDef AddDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  ColumnDeclare n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Identifier n15 = null;
  NodeSequence n16 = null;
  NodeOptional n17 = new NodeOptional();
  Constraint n18 = null;
  NodeChoice n19 = null;
  PrimaryKeyDef n20 = null;
  ForeignKeyDef n21 = null;
  CheckDef n22 = null;
}
{
  n1 = < ADD_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      { n3 = new NodeSequence(3); }
      [
        n6 = < COLUMN_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4.addNode(n5); }
      ]
      { n3.addNode(n4); }
      n7 = ColumnDeclare(prn)
      { n3.addNode(n7); }
      [
        (
          n11 = < FIRST_ >
          { n10 = JTBToolkit.makeNodeToken(n11); }
          { n9 = new NodeChoice(n10, 0, 2); }
        |
          { n12 = new NodeSequence(2); }
          n14 = < AFTER_ >
          { n13 = JTBToolkit.makeNodeToken(n14); }
          { n12.addNode(n13); }
          n15 = Identifier(prn)
          { n12.addNode(n15); }
          { n9 = new NodeChoice(n12, 1, 2); }
        )
        { n8.addNode(n9); }
      ]
      { n3.addNode(n8); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      { n16 = new NodeSequence(2); }
      [
        n18 = Constraint(prn)
        { n17.addNode(n18); }
      ]
      { n16.addNode(n17); }
      (
        (
          n20 = PrimaryKeyDef(prn)
          { n19 = new NodeChoice(n20, 0, 3); }
        |
          n21 = ForeignKeyDef(prn)
          { n19 = new NodeChoice(n21, 1, 3); }
        |
          n22 = CheckDef(prn)
          { n19 = new NodeChoice(n22, 2, 3); }
        )
        
      )
      { n16.addNode(n19); }
      { n2 = new NodeChoice(n16, 1, 2); }
    )
    
  )
  { return new AddDef(n0, n2); }
}

//ok
DropDef DropDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  Constraint n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      { n3 = new NodeSequence(2); }
      [
        n6 = < COLUMN_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4.addNode(n5); }
      ]
      { n3.addNode(n4); }
      n7 = Identifier(prn)
      { n3.addNode(n7); }
      { n2 = new NodeChoice(n3, 0, 3); }
    |
      n8 = Constraint(prn)
      { n2 = new NodeChoice(n8, 1, 3); }
    |
      n10 = < PRIMARYKEY_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n2 = new NodeChoice(n9, 2, 3); }
    )
    
  )
  { return new DropDef(n0, n2); }
}

RenameDef RenameDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Identifier n8 = null;
}
{
  n1 = < RENAME_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < COLUMN_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n5 = Identifier(prn)
  n7 = < TO_ >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Identifier(prn)
  { return new RenameDef(n0, n2, n5, n6, n8); }
}

AlterDef AlterDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeToken n6 = null;
  Token n7 = null;
  AlterDefOperation n8 = null;
}
{
  (
    (
      n2 = < MODIFY_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < ALTER_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  [
    n7 = < COLUMN_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
  ]
  n8 = AlterDefOperation(prn)
  { return new AlterDef(n0, n5, n8); }
}

AlterDefOperation AlterDefOperation(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeChoice n1 = null;
  AlterDefOperationType n2 = null;
  AlterDefOperationSet n3 = null;
  DropDefaultNotNull n4 = null;
}
{
  n0 = Identifier(prn)
  (
    (
      n2 = AlterDefOperationType(prn)
      { n1 = new NodeChoice(n2, 0, 3); }
    |
      n3 = AlterDefOperationSet(prn)
      { n1 = new NodeChoice(n3, 1, 3); }
    |
      n4 = DropDefaultNotNull(prn)
      { n1 = new NodeChoice(n4, 2, 3); }
    )
    
  )
  { return new AlterDefOperation(n0, n1); }
}

AlterDefOperationType AlterDefOperationType(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  types n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeChoice n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  IntervalLiterals n22 = null;
}
{
  n1 = < TYPE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = types()
  [
    { n4 = new NodeSequence(2); }
    n6 = < USING_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    (
      (
        n9 = < STRING_LITERAL >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n7 = new NodeChoice(n8, 0, 8); }
      |
        n11 = < NULL_ >
        { n10 = JTBToolkit.makeNodeToken(n11); }
        { n7 = new NodeChoice(n10, 1, 8); }
      |
        n13 = < DATE_ >
        { n12 = JTBToolkit.makeNodeToken(n13); }
        { n7 = new NodeChoice(n12, 2, 8); }
      |
        n15 = < TIME_ >
        { n14 = JTBToolkit.makeNodeToken(n15); }
        { n7 = new NodeChoice(n14, 3, 8); }
      |
        n17 = < TIMESTAMP_ >
        { n16 = JTBToolkit.makeNodeToken(n17); }
        { n7 = new NodeChoice(n16, 4, 8); }
      |
        n19 = < INT_LITERAL >
        { n18 = JTBToolkit.makeNodeToken(n19); }
        { n7 = new NodeChoice(n18, 5, 8); }
      |
        n21 = < DECIMAL_LITERAL >
        { n20 = JTBToolkit.makeNodeToken(n21); }
        { n7 = new NodeChoice(n20, 6, 8); }
      |
        LOOKAHEAD( 2 )
        n22 = IntervalLiterals(prn)
        { n7 = new NodeChoice(n22, 7, 8); }
      )
      
    )
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  ]
  { return new AlterDefOperationType(n0, n2, n3); }
}

AlterDefOperationSet AlterDefOperationSet(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  DefaultSpec n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  n1 = < SET_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n3 = DefaultSpec(prn)
      { n2 = new NodeChoice(n3, 0, 4); }
    |
      { n4 = new NodeSequence(2); }
      n6 = < NOT_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8 = < NULL_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      { n2 = new NodeChoice(n4, 1, 4); }
    |
      { n9 = new NodeSequence(2); }
      n11 = < STATISTICS_ >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13 = < INT_LITERAL >
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      { n2 = new NodeChoice(n9, 2, 4); }
    |
      n15 = < STORAGE_ >
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n2 = new NodeChoice(n14, 3, 4); }
    )
    
  )
  { return new AlterDefOperationSet(n0, n2); }
}

DropDefaultNotNull DropDefaultNotNull(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < DEFAULT_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      { n5 = new NodeSequence(2); }
      n7 = < NOT_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9 = < NULL_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n2 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  { return new DropDefaultNotNull(n0, n2); }
}

Delete Delete(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
  NodeOptional n5 = new NodeOptional();
  WhereClause n6 = null;
}
{
  n1 = < DELETE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < FROM_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  [
    n6 = WhereClause(prn)
    { n5.addNode(n6); }
  ]
  { return new Delete(n0, n2, n4, n5); }
}

UpdateTable UpdateTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SetUpdateClause n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  SetUpdateClause n10 = null;
  NodeOptional n11 = new NodeOptional();
  WhereClause n12 = null;
}
{
  n1 = < UPDATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = TableName(prn)
  n4 = < SET_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = SetUpdateClause(prn)
  (
    { n7 = new NodeSequence(2); }
    n9 = ","
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
    n10 = SetUpdateClause(prn)
    { n7.addNode(n10); }
    { n6.addNode(n7); }
  )*
  { n6.nodes.trimToSize(); }
  [
    n12 = WhereClause(prn)
    { n11.addNode(n12); }
  ]
  { return new UpdateTable(n0, n2, n3, n5, n6, n11); }
}

//ok
SetUpdateClause SetUpdateClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  TableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SQLSimpleExpression n8 = null;
}
{
  [
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(2); }
    n2 = TableName(prn)
    { n1.addNode(n2); }
    n4 = "."
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n1.addNode(n3); }
    { n0.addNode(n1); }
  ]
  n5 = Identifier(prn)
  n7 = "="
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = SQLSimpleExpression(prn)
  { return new SetUpdateClause(n0, n5, n6, n8); }
}

//ok
createIndex createIndex(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  TableName n10 = null;
  NodeOptional n11 = new NodeOptional();
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Identifier n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  columnListIndexSpec n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeOptional n21 = new NodeOptional();
  tablespaceDef n22 = null;
  NodeOptional n23 = new NodeOptional();
  WhereClause n24 = null;
}
{
  n1 = < CREATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < UNIQUE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n6 = < INDEX_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Identifier(prn)
  n9 = < ON_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = TableName(prn)
  [
    { n12 = new NodeSequence(2); }
    n14 = < USING_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n12.addNode(n13); }
    n15 = Identifier(prn)
    { n12.addNode(n15); }
    { n11.addNode(n12); }
  ]
  n17 = < PARENTHESIS_START_ >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  n18 = columnListIndexSpec(prn)
  n20 = < PARENTHESIS_CLOSE_ >
  { n19 = JTBToolkit.makeNodeToken(n20); }
  [
    n22 = tablespaceDef(prn)
    { n21.addNode(n22); }
  ]
  [
    n24 = WhereClause(prn)
    { n23.addNode(n24); }
  ]
  { return new createIndex(n0, n2, n5, n7, n8, n10, n11, n16, n18, n19, n21, n23); }
}

//ok
columnListIndexSpec columnListIndexSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Identifier n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SQLSimpleExpression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  Identifier n14 = null;
  NodeListOptional n15 = new NodeListOptional();
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeChoice n19 = null;
  Identifier n20 = null;
  NodeSequence n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  SQLSimpleExpression n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeOptional n27 = null;
  NodeChoice n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  Identifier n33 = null;
}
{
  (
    (
      n1 = Identifier(prn)
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n2 = new NodeSequence(3); }
      n4 = < PARENTHESIS_START_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5 = SQLSimpleExpression(prn)
      { n2.addNode(n5); }
      n7 = < PARENTHESIS_CLOSE_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1, 2); }
    )
    
  )
  [
    (
      n11 = < ASC_ >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9 = new NodeChoice(n10, 0, 3); }
    |
      n13 = < DESC_ >
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9 = new NodeChoice(n12, 1, 3); }
    |
      n14 = Identifier(prn)
      { n9 = new NodeChoice(n14, 2, 3); }
    )
    { n8.addNode(n9); }
  ]
  (
    { n27 = new NodeOptional(); }
    { n16 = new NodeSequence(3); }
    n18 = ","
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n16.addNode(n17); }
    (
      (
        n20 = Identifier(prn)
        { n19 = new NodeChoice(n20, 0, 2); }
      |
        { n21 = new NodeSequence(3); }
        n23 = < PARENTHESIS_START_ >
        { n22 = JTBToolkit.makeNodeToken(n23); }
        { n21.addNode(n22); }
        n24 = SQLSimpleExpression(prn)
        { n21.addNode(n24); }
        n26 = < PARENTHESIS_CLOSE_ >
        { n25 = JTBToolkit.makeNodeToken(n26); }
        { n21.addNode(n25); }
        { n19 = new NodeChoice(n21, 1, 2); }
      )
      
    )
    { n16.addNode(n19); }
    [
      (
        n30 = < ASC_ >
        { n29 = JTBToolkit.makeNodeToken(n30); }
        { n28 = new NodeChoice(n29, 0, 3); }
      |
        n32 = < DESC_ >
        { n31 = JTBToolkit.makeNodeToken(n32); }
        { n28 = new NodeChoice(n31, 1, 3); }
      |
        n33 = Identifier(prn)
        { n28 = new NodeChoice(n33, 2, 3); }
      )
      { n27.addNode(n28); }
    ]
    { n16.addNode(n27); }
    { n15.addNode(n16); }
  )*
  { n15.nodes.trimToSize(); }
  { return new columnListIndexSpec(n0, n8, n15); }
}

createTable createTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeOptional n4 = null;
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeChoice n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  TableName n17 = null;
  NodeChoice n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  CreateDefinition n22 = null;
  NodeListOptional n23 = new NodeListOptional();
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  CreateDefinition n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeOptional n30 = new NodeOptional();
  PartitionDeclare n31 = null;
  NodeOptional n32 = new NodeOptional();
  inheritsDef n33 = null;
  NodeOptional n34 = new NodeOptional();
  WithXRowID n35 = null;
  NodeOptional n36 = new NodeOptional();
  OnCommitClause n37 = null;
  NodeOptional n38 = new NodeOptional();
  tablespaceDef n39 = null;
  NodeSequence n40 = null;
  NodeOptional n41 = new NodeOptional();
  NodeSequence n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  ColumnNameList n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  NodeOptional n48 = new NodeOptional();
  PartitionDeclare n49 = null;
  NodeOptional n50 = new NodeOptional();
  WithXRowID n51 = null;
  NodeOptional n52 = new NodeOptional();
  OnCommitClause n53 = null;
  NodeOptional n54 = new NodeOptional();
  tablespaceDef n55 = null;
  NodeToken n56 = null;
  Token n57 = null;
  SelectWithoutOrderAndSet n58 = null;
}
{
  n1 = < CREATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n4 = new NodeOptional(); }
    { n3 = new NodeSequence(2); }
    [
      (
        n7 = < LOCAL_ >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n5 = new NodeChoice(n6, 0, 2); }
      |
        n9 = < GLOBAL_ >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n5 = new NodeChoice(n8, 1, 2); }
      )
      { n4.addNode(n5); }
    ]
    { n3.addNode(n4); }
    (
      (
        n12 = < TEMP_ >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n10 = new NodeChoice(n11, 0, 2); }
      |
        n14 = < TEMPORARY_ >
        { n13 = JTBToolkit.makeNodeToken(n14); }
        { n10 = new NodeChoice(n13, 1, 2); }
      )
      
    )
    { n3.addNode(n10); }
    { n2.addNode(n3); }
  ]
  n16 = < TABLE_ >
  { n15 = JTBToolkit.makeNodeToken(n16); }
  n17 = TableName(prn)
  (
    (
      LOOKAHEAD( 3 )
      { n19 = new NodeSequence(9); }
      n21 = < PARENTHESIS_START_ >
      { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
      n22 = CreateDefinition(prn)
      { n19.addNode(n22); }
      (
        { n24 = new NodeSequence(2); }
        n26 = ","
        { n25 = JTBToolkit.makeNodeToken(n26); }
        { n24.addNode(n25); }
        n27 = CreateDefinition(prn)
        { n24.addNode(n27); }
        { n23.addNode(n24); }
      )*
      { n23.nodes.trimToSize(); }
      { n19.addNode(n23); }
      n29 = < PARENTHESIS_CLOSE_ >
      { n28 = JTBToolkit.makeNodeToken(n29); }
      { n19.addNode(n28); }
      [
        n31 = PartitionDeclare(prn)
        { n30.addNode(n31); }
      ]
      { n19.addNode(n30); }
      [
        n33 = inheritsDef(prn)
        { n32.addNode(n33); }
      ]
      { n19.addNode(n32); }
      [
        n35 = WithXRowID(prn)
        { n34.addNode(n35); }
      ]
      { n19.addNode(n34); }
      [
        n37 = OnCommitClause(prn)
        { n36.addNode(n37); }
      ]
      { n19.addNode(n36); }
      [
        n39 = tablespaceDef(prn)
        { n38.addNode(n39); }
      ]
      { n19.addNode(n38); }
      { n18 = new NodeChoice(n19, 0, 2); }
    |
      LOOKAHEAD( 2 )
      { n40 = new NodeSequence(7); }
      [
        { n42 = new NodeSequence(3); }
        n44 = < PARENTHESIS_START_ >
        { n43 = JTBToolkit.makeNodeToken(n44); }
        { n42.addNode(n43); }
        n45 = ColumnNameList(prn)
        { n42.addNode(n45); }
        n47 = < PARENTHESIS_CLOSE_ >
        { n46 = JTBToolkit.makeNodeToken(n47); }
        { n42.addNode(n46); }
        { n41.addNode(n42); }
      ]
      { n40.addNode(n41); }
      [
        n49 = PartitionDeclare(prn)
        { n48.addNode(n49); }
      ]
      { n40.addNode(n48); }
      [
        n51 = WithXRowID(prn)
        { n50.addNode(n51); }
      ]
      { n40.addNode(n50); }
      [
        n53 = OnCommitClause(prn)
        { n52.addNode(n53); }
      ]
      { n40.addNode(n52); }
      [
        n55 = tablespaceDef(prn)
        { n54.addNode(n55); }
      ]
      { n40.addNode(n54); }
      n57 = < AS_ >
      { n56 = JTBToolkit.makeNodeToken(n57); }
      { n40.addNode(n56); }
      n58 = SelectWithoutOrderAndSet(prn)
      { n40.addNode(n58); }
      { n18 = new NodeChoice(n40, 1, 2); }
    )
    
  )
  { return new createTable(n0, n2, n15, n17, n18); }
}

OnCommitClause OnCommitClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < ON_COMMIT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < PRESERVE_ROWS_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 3); }
    |
      n6 = < DELETE_ROWS_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2 = new NodeChoice(n5, 1, 3); }
    |
      n8 = < DROP_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n2 = new NodeChoice(n7, 2, 3); }
    )
    
  )
  { return new OnCommitClause(n0, n2); }
}

WithXRowID WithXRowID(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < WITH_XROWID_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < WITHOUT_XROWID_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new WithXRowID(n0); }
}

tablespaceDef tablespaceDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
}
{
  n1 = < TABLESPACE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  { return new tablespaceDef(n0, n2); }
}

inheritsDef inheritsDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  TableName n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < INHERITS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  (
    { n6 = new NodeSequence(2); }
    n8 = ","
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n9 = TableName(prn)
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  n11 = < PARENTHESIS_CLOSE_ >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new inheritsDef(n0, n2, n4, n5, n10); }
}

createView createView(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TableName n7 = null;
  NodeOptional n8 = new NodeOptional();
  ColumnNameListWithParenthesis n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SelectWithoutOrder n12 = null;
}
{
  (
    (
      n2 = < CREATE_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < REPLACE_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  n6 = < VIEW_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = TableName(prn)
  [
    n9 = ColumnNameListWithParenthesis(prn)
    { n8.addNode(n9); }
  ]
  n11 = < AS_ >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n12 = SelectWithoutOrder(prn)
  { return new createView(n0, n5, n7, n8, n10, n12); }
}

ColumnNameListWithParenthesis ColumnNameListWithParenthesis(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ColumnNameList n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < PARENTHESIS_START_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = ColumnNameList(prn)
  n4 = < PARENTHESIS_CLOSE_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new ColumnNameListWithParenthesis(n0, n2, n3); }
}

DropView DropView(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < VIEW_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  { return new DropView(n0, n2, n4); }
}

dropTable dropTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  TableName n9 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < TABLE_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  (
    { n6 = new NodeSequence(2); }
    n8 = ","
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n9 = TableName(prn)
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  { return new dropTable(n0, n2, n4, n5); }
}

InsertTable InsertTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  TableName n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  ColumnNameList n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeChoice n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  SQLExpressionList n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  SelectWithoutOrderWithParenthesis n22 = null;
}
{
  n1 = < INSERT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < INTO_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n5 = TableName(prn)
  [
    LOOKAHEAD( < PARENTHESIS_START_ > ColumnNameList(prn) )
    { n7 = new NodeSequence(3); }
    n9 = < PARENTHESIS_START_ >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
    n10 = ColumnNameList(prn)
    { n7.addNode(n10); }
    n12 = < PARENTHESIS_CLOSE_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n7.addNode(n11); }
    { n6.addNode(n7); }
  ]
  (
    (
      { n14 = new NodeSequence(4); }
      n16 = < VALUES_ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n18 = < PARENTHESIS_START_ >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n14.addNode(n17); }
      n19 = SQLExpressionList(prn)
      { n14.addNode(n19); }
      n21 = < PARENTHESIS_CLOSE_ >
      { n20 = JTBToolkit.makeNodeToken(n21); }
      { n14.addNode(n20); }
      { n13 = new NodeChoice(n14, 0, 2); }
    |
      n22 = SelectWithoutOrderWithParenthesis(prn)
      { n13 = new NodeChoice(n22, 1, 2); }
    )
    
  )
  { return new InsertTable(n0, n2, n5, n6, n13); }
}

PrimaryKeyDef PrimaryKeyDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ColumnNameList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < PRIMARYKEY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = ColumnNameList(prn)
  n6 = < PARENTHESIS_CLOSE_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new PrimaryKeyDef(n0, n2, n4, n5); }
}

CheckDef CheckDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLComplexExpression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < CHECK_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLComplexExpression(prn)
  n6 = < PARENTHESIS_CLOSE_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new CheckDef(n0, n2, n4, n5); }
}

CreateDefinition CreateDefinition(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ColumnDeclare n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  Constraint n4 = null;
  NodeChoice n5 = null;
  PrimaryKeyDef n6 = null;
  ForeignKeyDef n7 = null;
  CheckDef n8 = null;
}
{
  (
    n1 = ColumnDeclare(prn)
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n2 = new NodeSequence(2); }
    [
      n4 = Constraint(prn)
      { n3.addNode(n4); }
    ]
    { n2.addNode(n3); }
    (
      (
        n6 = PrimaryKeyDef(prn)
        { n5 = new NodeChoice(n6, 0, 3); }
      |
        n7 = ForeignKeyDef(prn)
        { n5 = new NodeChoice(n7, 1, 3); }
      |
        n8 = CheckDef(prn)
        { n5 = new NodeChoice(n8, 2, 3); }
      )
      
    )
    { n2.addNode(n5); }
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new CreateDefinition(n0); }
}

//ok
ColumnDeclare ColumnDeclare(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  types n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = new NodeOptional();
  DefaultSpec n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeToken n14 = null;
  Token n15 = null;
  NodeOptional n16 = new NodeOptional();
  CheckDef n17 = null;
}
{
  n0 = Identifier(prn)
  n1 = types()
  [
    (
      { n4 = new NodeSequence(2); }
      n6 = < NOT_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8 = < NULL_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n10 = < NULL_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n3 = new NodeChoice(n9, 1, 2); }
    )
    { n2.addNode(n3); }
  ]
  [
    n12 = DefaultSpec(prn)
    { n11.addNode(n12); }
  ]
  [
    n15 = < PRIMARYKEY_ >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n13.addNode(n14); }
  ]
  [
    n17 = CheckDef(prn)
    { n16.addNode(n17); }
  ]
  { return new ColumnDeclare(n0, n1, n2, n11, n13, n16); }
}

//ok
ForeignKeyDef ForeignKeyDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ColumnNameList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  TableName n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  ColumnNameList n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < FOREIGNKEY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = ColumnNameList(prn)
  n6 = < PARENTHESIS_CLOSE_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < REFERENCES_ >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = TableName(prn)
  n11 = < PARENTHESIS_START_ >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n12 = ColumnNameList(prn)
  n14 = < PARENTHESIS_CLOSE_ >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new ForeignKeyDef(n0, n2, n4, n5, n7, n9, n10, n12, n13); }
}

/*
	Default Date - Will provide you with setting up the current time.
	Default TIME - Will get the current time and then Insert it into
*/
DefaultSpec DefaultSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SQLSimpleExpression n2 = null;
}
{
  n1 = < DEFAULT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SQLSimpleExpression(prn)
  { return new DefaultSpec(n0, n2); }
}

PartitionDeclare PartitionDeclare(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  Identifier n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  PartitionChoice n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeChoice n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeSequence n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  PartitionChoice n31 = null;
}
{
  (
    { n1 = new NodeSequence(4); }
    n3 = < PARTITIONINGKEY_ >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    [
      n5 = Identifier(prn)
      { n4.addNode(n5); }
    ]
    { n1.addNode(n4); }
    n7 = < ON_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n1.addNode(n6); }
    n8 = PartitionChoice(prn)
    { n1.addNode(n8); }
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    { n9 = new NodeSequence(2); }
    n11 = < PARTITION_WITH_ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n9.addNode(n10); }
    n13 = < PARENT_ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n9.addNode(n12); }
    { n0 = new NodeChoice(n9, 1, 5); }
  |
    n15 = < REPLICATED_ >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n0 = new NodeChoice(n14, 2, 5); }
  |
    { n16 = new NodeSequence(3); }
    n18 = < ON_ >
    { n17 = JTBToolkit.makeNodeToken(n18); }
    { n16.addNode(n17); }
    (
      (
        n21 = < NODE_ >
        { n20 = JTBToolkit.makeNodeToken(n21); }
        { n19 = new NodeChoice(n20, 0, 2); }
      |
        n23 = < NODES_ >
        { n22 = JTBToolkit.makeNodeToken(n23); }
        { n19 = new NodeChoice(n22, 1, 2); }
      )
      
    )
    { n16.addNode(n19); }
    n25 = < INT_LITERAL >
    { n24 = JTBToolkit.makeNodeToken(n25); }
    { n16.addNode(n24); }
    { n0 = new NodeChoice(n16, 3, 5); }
  |
    { n26 = new NodeSequence(3); }
    n28 = < ROUND_ROBIN_ >
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n26.addNode(n27); }
    n30 = < ON_ >
    { n29 = JTBToolkit.makeNodeToken(n30); }
    { n26.addNode(n29); }
    n31 = PartitionChoice(prn)
    { n26.addNode(n31); }
    { n0 = new NodeChoice(n26, 4, 5); }
  )
  { return new PartitionDeclare(n0); }
}

PartitionChoice PartitionChoice(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodePartitionList n9 = null;
}
{
  (
    n2 = < ALL_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(2); }
    (
      (
        n6 = < NODE_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4 = new NodeChoice(n5, 0, 2); }
      |
        n8 = < NODES_ >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n4 = new NodeChoice(n7, 1, 2); }
      )
      
    )
    { n3.addNode(n4); }
    n9 = NodePartitionList(prn)
    { n3.addNode(n9); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new PartitionChoice(n0); }
}

NodePartitionList NodePartitionList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeList n2 = new NodeList();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < INT_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    LOOKAHEAD( 2 )
    { n3 = new NodeSequence(2); }
    n5 = ","
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n7 = < INT_LITERAL >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  )+
  { n2.nodes.trimToSize(); }
  { return new NodePartitionList(n0, n2); }
}

types types() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  IntegerDataType n1 = null;
  SmallIntDataType n2 = null;
  RealDataType n3 = null;
  DoublePrecision n4 = null;
  FloatDataType n5 = null;
  DecimalDataType n6 = null;
  NumericDataType n7 = null;
  FixedDataType n8 = null;
  CharachterDataType n9 = null;
  VarCharDataType n10 = null;
  DateDataType n11 = null;
  TimeDataType n12 = null;
  TimeStampDataType n13 = null;
  BooleanDataType n14 = null;
  NationalCharDataType n15 = null;
  SerialDataType n16 = null;
  BigSerialDataType n17 = null;
  BigIntDataType n18 = null;
  IntervalDataType n19 = null;
  TextDataType n20 = null;
  BLOBDataType n21 = null;
  BitDataType n22 = null;
  VarBitDataType n23 = null;
  MacAddrDataType n24 = null;
  CidrDataType n25 = null;
  InetDataType n26 = null;
  GeometryDataType n27 = null;
  Box2DDataType n28 = null;
  Box3DDataType n29 = null;
  Box3DExtentDataType n30 = null;
  RegClassDataType n31 = null;
}
{
  (
    n1 = IntegerDataType()
    { n0 = new NodeChoice(n1, 0, 31); }
  |
    n2 = SmallIntDataType()
    { n0 = new NodeChoice(n2, 1, 31); }
  |
    LOOKAHEAD( 2 )
    n3 = RealDataType()
    { n0 = new NodeChoice(n3, 2, 31); }
  |
    n4 = DoublePrecision()
    { n0 = new NodeChoice(n4, 3, 31); }
  |
    n5 = FloatDataType()
    { n0 = new NodeChoice(n5, 4, 31); }
  |
    LOOKAHEAD( 2 )
    n6 = DecimalDataType()
    { n0 = new NodeChoice(n6, 5, 31); }
  |
    n7 = NumericDataType()
    { n0 = new NodeChoice(n7, 6, 31); }
  |
    n8 = FixedDataType()
    { n0 = new NodeChoice(n8, 7, 31); }
  |
    n9 = CharachterDataType()
    { n0 = new NodeChoice(n9, 8, 31); }
  |
    n10 = VarCharDataType()
    { n0 = new NodeChoice(n10, 9, 31); }
  |
    n11 = DateDataType()
    { n0 = new NodeChoice(n11, 10, 31); }
  |
    n12 = TimeDataType()
    { n0 = new NodeChoice(n12, 11, 31); }
  |
    n13 = TimeStampDataType()
    { n0 = new NodeChoice(n13, 12, 31); }
  |
    n14 = BooleanDataType()
    { n0 = new NodeChoice(n14, 13, 31); }
  |
    n15 = NationalCharDataType()
    { n0 = new NodeChoice(n15, 14, 31); }
  |
    n16 = SerialDataType()
    { n0 = new NodeChoice(n16, 15, 31); }
  |
    n17 = BigSerialDataType()
    { n0 = new NodeChoice(n17, 16, 31); }
  |
    n18 = BigIntDataType()
    { n0 = new NodeChoice(n18, 17, 31); }
  |
    n19 = IntervalDataType()
    { n0 = new NodeChoice(n19, 18, 31); }
  |
    n20 = TextDataType()
    { n0 = new NodeChoice(n20, 19, 31); }
  |
    n21 = BLOBDataType()
    { n0 = new NodeChoice(n21, 20, 31); }
  |
    n22 = BitDataType()
    { n0 = new NodeChoice(n22, 21, 31); }
  |
    n23 = VarBitDataType()
    { n0 = new NodeChoice(n23, 22, 31); }
  |
    n24 = MacAddrDataType()
    { n0 = new NodeChoice(n24, 23, 31); }
  |
    n25 = CidrDataType()
    { n0 = new NodeChoice(n25, 24, 31); }
  |
    n26 = InetDataType()
    { n0 = new NodeChoice(n26, 25, 31); }
  |
    n27 = GeometryDataType()
    { n0 = new NodeChoice(n27, 26, 31); }
  |
    n28 = Box2DDataType()
    { n0 = new NodeChoice(n28, 27, 31); }
  |
    n29 = Box3DDataType()
    { n0 = new NodeChoice(n29, 28, 31); }
  |
    n30 = Box3DExtentDataType()
    { n0 = new NodeChoice(n30, 29, 31); }
  |
    n31 = RegClassDataType()
    { n0 = new NodeChoice(n31, 30, 31); }
  )
  { return new types(n0); }
}

/*
 * This must be in synch with org.postgresql.stado.Parser.Handler.DataTypeHandler.INTERVAL_QUALIFIERS constant array
 * Order is important !
 */
DatetimeField DatetimeField() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  (
    n2 = < YEAR_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    n4 = < QUARTER_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 8); }
  |
    n6 = < MONTH_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 8); }
  |
    n8 = < WEEK_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 8); }
  |
    n10 = < DAY_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 8); }
  |
    n12 = < HOUR_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 8); }
  |
    n14 = < MINUTE_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 8); }
  |
    n16 = < SECOND_ >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 8); }
  )
  { return new DatetimeField(n0); }
}

IntervalQualifier IntervalQualifier() :
{
  // --- JTB generated node declarations ---
  DatetimeField n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  DatetimeField n3 = null;
}
{
  n0 = DatetimeField()
  n2 = < TO_ >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = DatetimeField()
  { return new IntervalQualifier(n0, n1, n3); }
}

IntervalDataType IntervalDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  IntervalQualifier n3 = null;
}
{
  n1 = < INTERVAL_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    LOOKAHEAD( 2 )
    n3 = IntervalQualifier()
    { n2.addNode(n3); }
  ]
  { return new IntervalDataType(n0, n2); }
}

TextDataType TextDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    n2 = < TEXT_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 7); }
  |
    n4 = < CLOB_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 7); }
  |
    n6 = < LONG_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 7); }
  |
    n8 = < LONG_VARCHAR_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 7); }
  |
    n10 = < LONGTEXT_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 7); }
  |
    n12 = < LVARCHAR_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 7); }
  |
    n14 = < MEDIUMTEXT_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 7); }
  )
  { return new TextDataType(n0); }
}

BLOBDataType BLOBDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  (
    n2 = < BLOB_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    n4 = < BYTEA_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 8); }
  |
    n6 = < BYTE_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 8); }
  |
    n8 = < BINARY_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 8); }
  |
    n10 = < IMAGE_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 8); }
  |
    n12 = < LONG_RAW_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 8); }
  |
    n14 = < RAW_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 8); }
  |
    n16 = < VARBINARY_ >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 8); }
  )
  { return new BLOBDataType(n0); }
}

BitDataType BitDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  LengthSpec n3 = null;
}
{
  n1 = < BIT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = LengthSpec()
    { n2.addNode(n3); }
  ]
  { return new BitDataType(n0, n2); }
}

VarBitDataType VarBitDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  LengthSpec n3 = null;
}
{
  n1 = < VARBIT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = LengthSpec()
    { n2.addNode(n3); }
  ]
  { return new VarBitDataType(n0, n2); }
}

MacAddrDataType MacAddrDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < MACADDR_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new MacAddrDataType(n0); }
}

CidrDataType CidrDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < CIDR_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new CidrDataType(n0); }
}

InetDataType InetDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INET_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new InetDataType(n0); }
}

GeometryDataType GeometryDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < GEOMETRY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new GeometryDataType(n0); }
}

Box2DDataType Box2DDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BOX2D_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Box2DDataType(n0); }
}

Box3DDataType Box3DDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BOX3D_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Box3DDataType(n0); }
}

Box3DExtentDataType Box3DExtentDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BOX3DEXTENT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Box3DExtentDataType(n0); }
}

RegClassDataType RegClassDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < REGCLASS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new RegClassDataType(n0); }
}

BooleanDataType BooleanDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BOOLEAN_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BooleanDataType(n0); }
}

SmallIntDataType SmallIntDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeToken n8 = null;
  Token n9 = null;
  UnsignedZeroFillSpecs n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    (
      (
        n4 = < SMALLINT_ >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < INT2_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    [
      n9 = < SERIAL_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
    ]
    { n1.addNode(n7); }
    n10 = UnsignedZeroFillSpecs()
    { n1.addNode(n10); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n12 = < TINYINT_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 1, 2); }
  )
  { return new SmallIntDataType(n0); }
}

BigIntDataType BigIntDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeToken n8 = null;
  Token n9 = null;
  UnsignedZeroFillSpecs n10 = null;
}
{
  (
    (
      n2 = < BIGINT_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < BIGINTEGER_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < INT8_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  [
    n9 = < SERIAL_ >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
  ]
  n10 = UnsignedZeroFillSpecs()
  { return new BigIntDataType(n0, n7, n10); }
}

SerialDataType SerialDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SERIAL_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new SerialDataType(n0); }
}

BigSerialDataType BigSerialDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BIGSERIAL_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BigSerialDataType(n0); }
}

RealDataType RealDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnsignedZeroFillSpecs n7 = null;
}
{
  (
    (
      n2 = < REAL_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < SMALLFLOAT_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < FLOAT4_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  n7 = UnsignedZeroFillSpecs()
  { return new RealDataType(n0, n7); }
}

IntegerDataType IntegerDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeToken n8 = null;
  Token n9 = null;
  UnsignedZeroFillSpecs n10 = null;
}
{
  (
    (
      n2 = < INT_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < INTEGER_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < INT4_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  [
    n9 = < SERIAL_ >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
  ]
  n10 = UnsignedZeroFillSpecs()
  { return new IntegerDataType(n0, n7, n10); }
}

FloatDataType FloatDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  LengthSpec n3 = null;
  UnsignedZeroFillSpecs n4 = null;
}
{
  n1 = < FLOAT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = LengthSpec()
    { n2.addNode(n3); }
  ]
  n4 = UnsignedZeroFillSpecs()
  { return new FloatDataType(n0, n2, n4); }
}

TimeStampDataType TimeStampDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  LengthSpec n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeChoice n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    n3 = < TIMESTAMP_ >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    [
      n5 = LengthSpec()
      { n4.addNode(n5); }
    ]
    { n1.addNode(n4); }
    [
      LOOKAHEAD( 2 )
      (
        (
          n9 = < WITH_TIMEZONE_ >
          { n8 = JTBToolkit.makeNodeToken(n9); }
          { n7 = new NodeChoice(n8, 0, 2); }
        |
          n11 = < WITHOUT_TIMEZONE_ >
          { n10 = JTBToolkit.makeNodeToken(n11); }
          { n7 = new NodeChoice(n10, 1, 2); }
        )
        
      )
      { n6.addNode(n7); }
    ]
    { n1.addNode(n6); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n13 = < DATETIME_ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 1, 3); }
  |
    n15 = < SAMLLDATETIME_ >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n0 = new NodeChoice(n14, 2, 3); }
  )
  { return new TimeStampDataType(n0); }
}

TimeDataType TimeDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  LengthSpec n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < TIME_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = LengthSpec()
    { n2.addNode(n3); }
  ]
  [
    LOOKAHEAD( 2 )
    (
      (
        n7 = < WITH_TIMEZONE_ >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n5 = new NodeChoice(n6, 0, 2); }
      |
        n9 = < WITHOUT_TIMEZONE_ >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n5 = new NodeChoice(n8, 1, 2); }
      )
      
    )
    { n4.addNode(n5); }
  ]
  { return new TimeDataType(n0, n2, n4); }
}

DateDataType DateDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < DATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new DateDataType(n0); }
}

VarCharDataType VarCharDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  LengthSpec n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    (
      (
        n4 = < VARCHAR_ >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < VARCHAR2_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    [
      n8 = LengthSpec()
      { n7.addNode(n8); }
    ]
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n10 = < TINYTEXT_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 1, 2); }
  )
  { return new VarCharDataType(n0); }
}

NumericDataType NumericDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  PrecisionSpec n8 = null;
  UnsignedZeroFillSpecs n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(3); }
    (
      (
        n4 = < NUMERIC_ >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < NUMBER_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    [
      n8 = PrecisionSpec()
      { n7.addNode(n8); }
    ]
    { n1.addNode(n7); }
    n9 = UnsignedZeroFillSpecs()
    { n1.addNode(n9); }
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n11 = < MONEY_ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n0 = new NodeChoice(n10, 1, 4); }
  |
    n13 = < SMALLMONEY_ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 2, 4); }
  |
    n15 = < YEAR_ >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n0 = new NodeChoice(n14, 3, 4); }
  )
  { return new NumericDataType(n0); }
}

DecimalDataType DecimalDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  PrecisionSpec n6 = null;
  UnsignedZeroFillSpecs n7 = null;
}
{
  (
    (
      n2 = < DECIMAL_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < DEC_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  [
    n6 = PrecisionSpec()
    { n5.addNode(n6); }
  ]
  n7 = UnsignedZeroFillSpecs()
  { return new DecimalDataType(n0, n5, n7); }
}

FixedDataType FixedDataType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrecisionSpec n2 = null;
  UnsignedZeroFillSpecs n3 = null;
}
{
  n1 = < FIXED_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = PrecisionSpec()
  n3 = UnsignedZeroFillSpecs()
  { return new FixedDataType(n0, n2, n3); }
}

NationalCharDataType NationalCharDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = new NodeOptional();
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = new NodeOptional();
  LengthSpec n15 = null;
}
{
  (
    (
      n2 = < NCHAR_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n3 = new NodeSequence(2); }
      n5 = < NATIONAL_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      (
        (
          n8 = < CHAR_ >
          { n7 = JTBToolkit.makeNodeToken(n8); }
          { n6 = new NodeChoice(n7, 0, 2); }
        |
          n10 = < CHARACHTER_ >
          { n9 = JTBToolkit.makeNodeToken(n10); }
          { n6 = new NodeChoice(n9, 1, 2); }
        )
        
      )
      { n3.addNode(n6); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  [
    LOOKAHEAD( 2 )
    n13 = < VARYING_ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n11.addNode(n12); }
  ]
  [
    n15 = LengthSpec()
    { n14.addNode(n15); }
  ]
  { return new NationalCharDataType(n0, n11, n14); }
}

DoublePrecision DoublePrecision() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < DOUBLE_PRECISION_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FLOAT8_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new DoublePrecision(n0); }
}

CharachterDataType CharachterDataType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  LengthSpec n9 = null;
}
{
  (
    (
      n2 = < CHARACHTER_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < CHAR_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  [
    LOOKAHEAD( 2 )
    n7 = < VARYING_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
  ]
  [
    n9 = LengthSpec()
    { n8.addNode(n9); }
  ]
  { return new CharachterDataType(n0, n5, n8); }
}

LengthSpec LengthSpec() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < PARENTHESIS_START_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < PARENTHESIS_CLOSE_ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new LengthSpec(n0, n2, n4); }
}

UnsignedZeroFillSpecs UnsignedZeroFillSpecs() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
}
{
  [
    n2 = < UNSIGNED_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  [
    n5 = < ZEROFILL_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
  ]
  { return new UnsignedZeroFillSpecs(n0, n3); }
}

PrecisionSpec PrecisionSpec() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < PARENTHESIS_START_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    { n5 = new NodeSequence(2); }
    n7 = ","
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    n9 = < INT_LITERAL >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n5.addNode(n8); }
    { n4.addNode(n5); }
  ]
  n11 = < PARENTHESIS_CLOSE_ >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new PrecisionSpec(n0, n2, n4, n10); }
}

/********************************************************************************************
	The Select Statement Parsing starts here  The Production Rules for Select are as
	follows

	Select ---> SelectWithoutOrder OrderByClause
	SelectWithoutOrder --> SelectWithOutOrderAndSet



*********************************************************************************************/
SelectAddGeometryColumn SelectAddGeometryColumn(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  SQLArgument n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SQLArgument n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SQLArgument n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  SQLArgument n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  SQLArgument n18 = null;
  NodeOptional n19 = new NodeOptional();
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  SQLArgument n23 = null;
  NodeOptional n24 = new NodeOptional();
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  SQLArgument n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
}
{
  n1 = < SELECT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ADDGEOMETRYCOLUMN_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < PARENTHESIS_START_ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = SQLArgument(prn)
  n8 = ","
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = SQLArgument(prn)
  n11 = ","
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n12 = SQLArgument(prn)
  n14 = ","
  { n13 = JTBToolkit.makeNodeToken(n14); }
  n15 = SQLArgument(prn)
  n17 = ","
  { n16 = JTBToolkit.makeNodeToken(n17); }
  n18 = SQLArgument(prn)
  [
    LOOKAHEAD( 3 )
    { n20 = new NodeSequence(2); }
    n22 = ","
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n20.addNode(n21); }
    n23 = SQLArgument(prn)
    { n20.addNode(n23); }
    { n19.addNode(n20); }
  ]
  [
    { n25 = new NodeSequence(2); }
    n27 = ","
    { n26 = JTBToolkit.makeNodeToken(n27); }
    { n25.addNode(n26); }
    n28 = SQLArgument(prn)
    { n25.addNode(n28); }
    { n24.addNode(n25); }
  ]
  n30 = < PARENTHESIS_CLOSE_ >
  { n29 = JTBToolkit.makeNodeToken(n30); }
  { return new SelectAddGeometryColumn(n0, n2, n4, n6, n7, n9, n10, n12, n13, n15, n16, n18, n19, n24, n29); }
}

SelectWithParenthesis SelectWithParenthesis(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Select n0 = null;
}
{
  n0 = Select(prn)
  { return new SelectWithParenthesis(n0); }
}

Select Select(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SelectWithoutOrderWithParenthesis n0 = null;
  NodeOptional n1 = new NodeOptional();
  OrderByClause n2 = null;
  NodeOptional n3 = new NodeOptional();
  LimitClause n4 = null;
  NodeOptional n5 = new NodeOptional();
  OffsetClause n6 = null;
}
{
  n0 = SelectWithoutOrderWithParenthesis(prn)
  [
    n2 = OrderByClause(prn)
    { n1.addNode(n2); }
  ]
  [
    n4 = LimitClause(prn)
    { n3.addNode(n4); }
  ]
  [
    n6 = OffsetClause(prn)
    { n5.addNode(n6); }
  ]
  { return new Select(n0, n1, n3, n5); }
}

SelectWithoutOrderWithParenthesis SelectWithoutOrderWithParenthesis(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SelectWithoutOrder n0 = null;
}
{
  n0 = SelectWithoutOrder(prn)
  { return new SelectWithoutOrderWithParenthesis(n0); }
}

SelectWithoutOrder SelectWithoutOrder(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SelectWithoutOrderAndSetWithParenthesis n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeChoice n8 = null;
  SelectWithoutOrderAndSet n9 = null;
  UnionSpec n10 = null;
}
{
  n0 = SelectWithoutOrderAndSetWithParenthesis(prn)
  (
    { n5 = new NodeOptional(); }
    { n2 = new NodeSequence(3); }
    n4 = < UNION_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    [
      n7 = < ALL_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
    ]
    { n2.addNode(n5); }
    (
      (
        n9 = SelectWithoutOrderAndSet(prn)
        { n8 = new NodeChoice(n9, 0, 2); }
      |
        n10 = UnionSpec(prn)
        { n8 = new NodeChoice(n10, 1, 2); }
      )
      
    )
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SelectWithoutOrder(n0, n1); }
}

SelectWithoutOrderAndSetWithParenthesis SelectWithoutOrderAndSetWithParenthesis(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  SelectWithoutOrderAndSet n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SelectWithoutOrderAndSetWithParenthesis n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  (
    n1 = SelectWithoutOrderAndSet(prn)
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n2 = new NodeSequence(3); }
    n4 = < PARENTHESIS_START_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = SelectWithoutOrderAndSetWithParenthesis(prn)
    { n2.addNode(n5); }
    n7 = < PARENTHESIS_CLOSE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n2.addNode(n6); }
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new SelectWithoutOrderAndSetWithParenthesis(n0); }
}

UnionSpec UnionSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SelectWithoutOrder n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < PARENTHESIS_START_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SelectWithoutOrder(prn)
  n4 = < PARENTHESIS_CLOSE_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new UnionSpec(n0, n2, n3); }
}

/****************************************************************
Expansion For With List
******************************************************************/
WithList WithList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  WithDef n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  WithDef n5 = null;
}
{
  n0 = WithDef(prn)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = WithDef(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new WithList(n0, n1); }
}

WithDef WithDef(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeOptional n1 = new NodeOptional();
  ColumnNameListWithParenthesis n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  SelectWithoutOrder n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n0 = Identifier(prn)
  [
    n2 = ColumnNameListWithParenthesis(prn)
    { n1.addNode(n2); }
  ]
  n4 = < AS_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = < PARENTHESIS_START_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = SelectWithoutOrder(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new WithDef(n0, n1, n3, n5, n7, n8); }
}

WithSelect WithSelect(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  WithList n2 = null;
  Select n3 = null;
}
{
  n1 = < WITH_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = WithList(prn)
  n3 = Select(prn)
  { return new WithSelect(n0, n2, n3); }
}

SelectWithoutOrderAndSet SelectWithoutOrderAndSet(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  SelectList n10 = null;
  NodeOptional n11 = new NodeOptional();
  IntoClause n12 = null;
  NodeOptional n13 = new NodeOptional();
  FromClause n14 = null;
  NodeOptional n15 = new NodeOptional();
  WhereClause n16 = null;
  NodeOptional n17 = new NodeOptional();
  GroupByClause n18 = null;
  NodeOptional n19 = new NodeOptional();
  HavingClause n20 = null;
}
{
  n1 = < SELECT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    (
      n5 = < ALL_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3 = new NodeChoice(n4, 0, 3); }
    |
      n7 = < DISTINCT_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3 = new NodeChoice(n6, 1, 3); }
    |
      n9 = < UNIQUE_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n3 = new NodeChoice(n8, 2, 3); }
    )
    { n2.addNode(n3); }
  ]
  n10 = SelectList(prn)
  [
    n12 = IntoClause(prn)
    { n11.addNode(n12); }
  ]
  [
    n14 = FromClause(prn)
    { n13.addNode(n14); }
  ]
  [
    n16 = WhereClause(prn)
    { n15.addNode(n16); }
  ]
  [
    n18 = GroupByClause(prn)
    { n17.addNode(n18); }
  ]
  [
    n20 = HavingClause(prn)
    { n19.addNode(n20); }
  ]
  { return new SelectWithoutOrderAndSet(n0, n2, n10, n11, n13, n15, n17, n19); }
}

/****************************************************************
Expansion For Select List Starts
******************************************************************/
SelectList SelectList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SelectTupleSpec n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SelectTupleSpec n5 = null;
}
{
  n0 = SelectTupleSpec(prn)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = SelectTupleSpec(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SelectList(n0, n1); }
}

SelectTupleSpec SelectTupleSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  TableName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  SQLSimpleExpression n10 = null;
  NodeOptional n11 = new NodeOptional();
  SelectAliasSpec n12 = null;
}
{
  (
    (
      n2 = < STAR_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      LOOKAHEAD( TableName(prn) "." < STAR_ > )
      { n3 = new NodeSequence(3); }
      n4 = TableName(prn)
      { n3.addNode(n4); }
      n6 = "."
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      n8 = < STAR_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      { n9 = new NodeSequence(2); }
      n10 = SQLSimpleExpression(prn)
      { n9.addNode(n10); }
      [
        LOOKAHEAD( 2 )
        n12 = SelectAliasSpec(prn)
        { n11.addNode(n12); }
      ]
      { n9.addNode(n11); }
      { n0 = new NodeChoice(n9, 2, 3); }
    )
    
  )
  { return new SelectTupleSpec(n0); }
}

/********************
 * Expression of the form A+B -C * ( B + C)
 * Please read comments in SqlExpressionHandler if you are going to modify these
 ********************/
SQLSimpleExpression SQLSimpleExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLPrecedenceLevel1Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  SQLPrecedenceLevel1Operand n2 = null;
}
{
  n0 = SQLPrecedenceLevel1Expression(prn)
  (
    LOOKAHEAD( 2 )
    n2 = SQLPrecedenceLevel1Operand(prn)
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SQLSimpleExpression(n0, n1); }
}

SQLPrecedenceLevel1Expression SQLPrecedenceLevel1Expression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLPrecedenceLevel2Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  SQLPrecedenceLevel2Operand n2 = null;
}
{
  n0 = SQLPrecedenceLevel2Expression(prn)
  (
    LOOKAHEAD( 2 )
    n2 = SQLPrecedenceLevel2Operand(prn)
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SQLPrecedenceLevel1Expression(n0, n1); }
}

SQLPrecedenceLevel1Operand SQLPrecedenceLevel1Operand(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  SQLPrecedenceLevel1Expression n39 = null;
}
{
  (
    (
      n2 = < CONTAINED_WITHIN_OR_EQUALS_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 19); }
    |
      n4 = < CONTAINS_OR_EQUALS_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 19); }
    |
      n6 = < GREATER_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 19); }
    |
      n8 = < GREATER_EQUALS_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 19); }
    |
      n10 = < LESS_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 19); }
    |
      n12 = < LESS_EQUALS_ >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 19); }
    |
      n14 = < EQUALS_ >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 19); }
    |
      n16 = < NOT_EQUALS_ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 19); }
    |
      n18 = < NOT_EQUALS_2_ >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 19); }
    |
      n20 = < GIS_OVERLAPS_ >
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9, 19); }
    |
      n22 = < GIS_OVERLAPS_RIGHT_ >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10, 19); }
    |
      n24 = < GIS_OVERLAPS_LEFT_ >
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11, 19); }
    |
      n26 = < GIS_OVERLAPS_BELOW_ >
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12, 19); }
    |
      n28 = < GIS_OVERLAPS_ABOVE_ >
      { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13, 19); }
    |
      n30 = < GIS_SAME_ >
      { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14, 19); }
    |
      n32 = < GIS_STRICT_BELOW_ >
      { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15, 19); }
    |
      n34 = < GIS_STRICT_ABOVE_ >
      { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16, 19); }
    |
      n36 = < NOT_BITWISE_ >
      { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17, 19); }
    |
      n38 = < ABSOLUTE_ >
      { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18, 19); }
    )
    
  )
  n39 = SQLPrecedenceLevel1Expression(prn)
  { return new SQLPrecedenceLevel1Operand(n0, n39); }
}

SQLPrecedenceLevel2Expression SQLPrecedenceLevel2Expression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLPrecedenceLevel3Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  SQLPrecedenceLevel3Operand n2 = null;
}
{
  n0 = SQLPrecedenceLevel3Expression(prn)
  (
    LOOKAHEAD( 2 )
    n2 = SQLPrecedenceLevel3Operand(prn)
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SQLPrecedenceLevel2Expression(n0, n1); }
}

SQLPrecedenceLevel2Operand SQLPrecedenceLevel2Operand(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  SQLPrecedenceLevel2Expression n7 = null;
}
{
  (
    (
      n2 = < PLUS_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < MINUS_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < CONCAT_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  n7 = SQLPrecedenceLevel2Expression(prn)
  { return new SQLPrecedenceLevel2Operand(n0, n7); }
}

SQLPrecedenceLevel3Expression SQLPrecedenceLevel3Expression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLPrimaryExpression n0 = null;
}
{
  n0 = SQLPrimaryExpression(prn)
  { return new SQLPrecedenceLevel3Expression(n0); }
}

SQLPrecedenceLevel3Operand SQLPrecedenceLevel3Operand(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  SQLPrecedenceLevel3Expression n17 = null;
}
{
  (
    (
      n2 = < STAR_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 8); }
    |
      n4 = < DIVIDE_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 8); }
    |
      n6 = < MODULO_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 8); }
    |
      n8 = < AND_BITWISE_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 8); }
    |
      n10 = < OR_BITWISE_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 8); }
    |
      n12 = < XOR_BITWISE_ >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 8); }
    |
      n14 = < SHIFT_LEFT_BITWISE_ >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 8); }
    |
      n16 = < SHIFT_RIGHT_BITWISE_ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 8); }
    )
    
  )
  n17 = SQLPrecedenceLevel3Expression(prn)
  { return new SQLPrecedenceLevel3Operand(n0, n17); }
}

SQLPrimaryExpression SQLPrimaryExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeChoice n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeChoice n18 = null;
  FunctionCall n19 = null;
  TableColumn n20 = null;
  PseudoColumn n21 = null;
  numberValue n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  SQLComplexExpression n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  booleanLiteral n29 = null;
  stringLiteral n30 = null;
  NullLiterals n31 = null;
  IntervalLiterals n32 = null;
  TextLiterals n33 = null;
  PreparedStmtParameter n34 = null;
  TimeStampLiteral n35 = null;
  TimeLiteral n36 = null;
  DateLiteral n37 = null;
  binaryLiteral n38 = null;
  hex_decimalLiteral n39 = null;
  IntegerLiteral n40 = null;
  MacaddrLiteral n41 = null;
  CidrLiteral n42 = null;
  InetLiteral n43 = null;
  NodeOptional n44 = new NodeOptional();
  NodeToken n45 = null;
  Token n46 = null;
  NodeOptional n47 = new NodeOptional();
  NodeSequence n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  types n51 = null;
}
{
  [
    (
      n3 = < SQUARE_ROOT_ >
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1 = new NodeChoice(n2, 0, 5); }
    |
      n5 = < CUBE_ROOT_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1 = new NodeChoice(n4, 1, 5); }
    |
      n7 = < FACTORIAL_PREFIX_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1 = new NodeChoice(n6, 2, 5); }
    |
      n9 = < ABSOLUTE_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n1 = new NodeChoice(n8, 3, 5); }
    |
      n11 = < NOT_BITWISE_ >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n1 = new NodeChoice(n10, 4, 5); }
    )
    { n0.addNode(n1); }
  ]
  [
    (
      n15 = < PLUS_ >
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13 = new NodeChoice(n14, 0, 2); }
    |
      n17 = < MINUS_ >
      { n16 = JTBToolkit.makeNodeToken(n17); }
      { n13 = new NodeChoice(n16, 1, 2); }
    )
    { n12.addNode(n13); }
  ]
  (
    (
      LOOKAHEAD( 2 )
      n19 = FunctionCall(prn)
      { n18 = new NodeChoice(n19, 0, 20); }
    |
      LOOKAHEAD( 2 )
      n20 = TableColumn(prn)
      { n18 = new NodeChoice(n20, 1, 20); }
    |
      LOOKAHEAD( 2 )
      n21 = PseudoColumn(prn)
      { n18 = new NodeChoice(n21, 2, 20); }
    |
      n22 = numberValue(prn)
      { n18 = new NodeChoice(n22, 3, 20); }
    |
      LOOKAHEAD( 2 )
      { n23 = new NodeSequence(3); }
      n25 = < PARENTHESIS_START_ >
      { n24 = JTBToolkit.makeNodeToken(n25); }
      { n23.addNode(n24); }
      n26 = SQLComplexExpression(prn)
      { n23.addNode(n26); }
      n28 = < PARENTHESIS_CLOSE_ >
      { n27 = JTBToolkit.makeNodeToken(n28); }
      { n23.addNode(n27); }
      { n18 = new NodeChoice(n23, 4, 20); }
    |
      n29 = booleanLiteral(prn)
      { n18 = new NodeChoice(n29, 5, 20); }
    |
      n30 = stringLiteral(prn)
      { n18 = new NodeChoice(n30, 6, 20); }
    |
      n31 = NullLiterals(prn)
      { n18 = new NodeChoice(n31, 7, 20); }
    |
      LOOKAHEAD( 2 )
      n32 = IntervalLiterals(prn)
      { n18 = new NodeChoice(n32, 8, 20); }
    |
      LOOKAHEAD( 2 )
      n33 = TextLiterals(prn)
      { n18 = new NodeChoice(n33, 9, 20); }
    |
      LOOKAHEAD( 2 )
      n34 = PreparedStmtParameter(prn)
      { n18 = new NodeChoice(n34, 10, 20); }
    |
      n35 = TimeStampLiteral(prn)
      { n18 = new NodeChoice(n35, 11, 20); }
    |
      n36 = TimeLiteral(prn)
      { n18 = new NodeChoice(n36, 12, 20); }
    |
      n37 = DateLiteral(prn)
      { n18 = new NodeChoice(n37, 13, 20); }
    |
      n38 = binaryLiteral(prn)
      { n18 = new NodeChoice(n38, 14, 20); }
    |
      n39 = hex_decimalLiteral(prn)
      { n18 = new NodeChoice(n39, 15, 20); }
    |
      n40 = IntegerLiteral(prn)
      { n18 = new NodeChoice(n40, 16, 20); }
    |
      n41 = MacaddrLiteral(prn)
      { n18 = new NodeChoice(n41, 17, 20); }
    |
      n42 = CidrLiteral(prn)
      { n18 = new NodeChoice(n42, 18, 20); }
    |
      n43 = InetLiteral(prn)
      { n18 = new NodeChoice(n43, 19, 20); }
    )
    
  )
  [
    n46 = < FACTORIAL_ >
    { n45 = JTBToolkit.makeNodeToken(n46); }
    { n44.addNode(n45); }
  ]
  [
    { n48 = new NodeSequence(2); }
    n50 = "::"
    { n49 = JTBToolkit.makeNodeToken(n50); }
    { n48.addNode(n49); }
    n51 = types()
    { n48.addNode(n51); }
    { n47.addNode(n48); }
  ]
  { return new SQLPrimaryExpression(n0, n12, n18, n44, n47); }
}

IsNullExpression IsNullExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < IS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < NOT_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n6 = < NULL_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new IsNullExpression(n0, n2, n5); }
}

IsBooleanExpression IsBooleanExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < IS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < NOT_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n6 = < BINARY_LITERAL >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new IsBooleanExpression(n0, n2, n5); }
}

PreparedStmtParameter PreparedStmtParameter(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < PARAM_PLACE_HOLDER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new PreparedStmtParameter(n0); }
}

TimeStampLiteral TimeStampLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < TIMESTAMP_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new TimeStampLiteral(n0); }
}

TimeLiteral TimeLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < TIME_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new TimeLiteral(n0); }
}

DateLiteral DateLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < DATE_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new DateLiteral(n0); }
}

IntervalLiterals IntervalLiterals(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INTERVAL_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntervalLiterals(n0); }
}

TextLiterals TextLiterals(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < TEXT_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new TextLiterals(n0); }
}

NullLiterals NullLiterals(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < NULL_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new NullLiterals(n0); }
}

booleanLiteral booleanLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < TRUE_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FALSE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new booleanLiteral(n0); }
}

binaryLiteral binaryLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BINARY_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new binaryLiteral(n0); }
}

hex_decimalLiteral hex_decimalLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < HEXDECIMAL_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new hex_decimalLiteral(n0); }
}

IntegerLiteral IntegerLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INTEGER_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerLiteral(n0); }
}

MacaddrLiteral MacaddrLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < MACADDR_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new MacaddrLiteral(n0); }
}

CidrLiteral CidrLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < CIDR_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new CidrLiteral(n0); }
}

InetLiteral InetLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INET_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new InetLiteral(n0); }
}

GeometryLiteral GeometryLiteral(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < GEOMETRY_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new GeometryLiteral(n0); }
}

/*
void Box2DLiteral(PrintStream prn):
{}
{
    <BOX2D_LITERAL>
}

void Box3DLiteral(PrintStream prn):
{}
{
    <BOX3D_LITERAL>
}

void Box3DExtentLiteral(PrintStream prn):
{}
{
    <BOX3DEXTENT_LITERAL>
}


void RegClassLiteral(PrintStream prn):
{}
{
    <REGCLASS_LITERAL>
}
*/
PseudoColumn PseudoColumn(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  SelectList n10 = null;
  NodeOptional n11 = new NodeOptional();
  FromClause n12 = null;
  NodeOptional n13 = new NodeOptional();
  WhereClause n14 = null;
  NodeOptional n15 = new NodeOptional();
  LimitClause n16 = null;
  NodeOptional n17 = new NodeOptional();
  OffsetClause n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
}
{
  n1 = < PARENTHESIS_START_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < SELECT_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    (
      n7 = < ALL_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5 = new NodeChoice(n6, 0, 2); }
    |
      n9 = < DISTINCT_ >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5 = new NodeChoice(n8, 1, 2); }
    )
    { n4.addNode(n5); }
  ]
  n10 = SelectList(prn)
  [
    n12 = FromClause(prn)
    { n11.addNode(n12); }
  ]
  [
    n14 = WhereClause(prn)
    { n13.addNode(n14); }
  ]
  [
    n16 = LimitClause(prn)
    { n15.addNode(n16); }
  ]
  [
    n18 = OffsetClause(prn)
    { n17.addNode(n18); }
  ]
  n20 = < PARENTHESIS_CLOSE_ >
  { n19 = JTBToolkit.makeNodeToken(n20); }
  { return new PseudoColumn(n0, n2, n4, n10, n11, n13, n15, n17, n19); }
}

SQLArgumentList SQLArgumentList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLArgument n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SQLArgument n5 = null;
}
{
  n0 = SQLArgument(prn)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = SQLArgument(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SQLArgumentList(n0, n1); }
}

SQLArgument SQLArgument(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLSimpleExpression n0 = null;
}
{
  n0 = SQLSimpleExpression(prn)
  { return new SQLArgument(n0); }
}

CharString CharString(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  extendbObject n0 = null;
}
{
  n0 = extendbObject(prn)
  { return new CharString(n0); }
}

FunctionCall FunctionCall(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Func_PgCurrentDate n1 = null;
  Func_PgCurrentTime n2 = null;
  Func_PgCurrentTimeStamp n3 = null;
  Func_User n4 = null;
  Func_Avg n5 = null;
  Func_Count n6 = null;
  Func_Max n7 = null;
  Func_Min n8 = null;
  Func_Stdev n9 = null;
  Func_Sum n10 = null;
  Func_Variance n11 = null;
  Func_Trim n12 = null;
  Func_Case n13 = null;
  Func_Cast n14 = null;
  Func_Extract n15 = null;
  Func_Convert n16 = null;
  Func_Overlay n17 = null;
  Func_Position n18 = null;
  Func_Substring n19 = null;
  Func_ClockTimeStamp n20 = null;
  Func_StatementTimeStamp n21 = null;
  Func_TransactionTimeStamp n22 = null;
  Func_CurrentDatabase n23 = null;
  Func_CurrentSchema n24 = null;
  Func_Version n25 = null;
  Func_BitAnd n26 = null;
  Func_BitOr n27 = null;
  Func_BoolAnd n28 = null;
  Func_BoolOr n29 = null;
  Func_CorrCov n30 = null;
  Func_Regr n31 = null;
  Func_Coalesce n32 = null;
  Func_NullIf n33 = null;
  Func_Custom n34 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n1 = Func_PgCurrentDate(prn)
    { n0 = new NodeChoice(n1, 0, 34); }
  |
    LOOKAHEAD( 2 )
    n2 = Func_PgCurrentTime(prn)
    { n0 = new NodeChoice(n2, 1, 34); }
  |
    LOOKAHEAD( 2 )
    n3 = Func_PgCurrentTimeStamp(prn)
    { n0 = new NodeChoice(n3, 2, 34); }
  |
    LOOKAHEAD( 2 )
    n4 = Func_User(prn)
    { n0 = new NodeChoice(n4, 3, 34); }
  |
    LOOKAHEAD( 2 )
    n5 = Func_Avg(prn)
    { n0 = new NodeChoice(n5, 4, 34); }
  |
    LOOKAHEAD( 2 )
    n6 = Func_Count(prn)
    { n0 = new NodeChoice(n6, 5, 34); }
  |
    LOOKAHEAD( 2 )
    n7 = Func_Max(prn)
    { n0 = new NodeChoice(n7, 6, 34); }
  |
    LOOKAHEAD( 2 )
    n8 = Func_Min(prn)
    { n0 = new NodeChoice(n8, 7, 34); }
  |
    LOOKAHEAD( 2 )
    n9 = Func_Stdev(prn)
    { n0 = new NodeChoice(n9, 8, 34); }
  |
    LOOKAHEAD( 2 )
    n10 = Func_Sum(prn)
    { n0 = new NodeChoice(n10, 9, 34); }
  |
    LOOKAHEAD( 2 )
    n11 = Func_Variance(prn)
    { n0 = new NodeChoice(n11, 10, 34); }
  |
    LOOKAHEAD( 2 )
    n12 = Func_Trim(prn)
    { n0 = new NodeChoice(n12, 11, 34); }
  |
    LOOKAHEAD( 2 )
    n13 = Func_Case(prn)
    { n0 = new NodeChoice(n13, 12, 34); }
  |
    LOOKAHEAD( 2 )
    n14 = Func_Cast(prn)
    { n0 = new NodeChoice(n14, 13, 34); }
  |
    LOOKAHEAD( 2 )
    n15 = Func_Extract(prn)
    { n0 = new NodeChoice(n15, 14, 34); }
  |
    LOOKAHEAD( 2 )
    n16 = Func_Convert(prn)
    { n0 = new NodeChoice(n16, 15, 34); }
  |
    LOOKAHEAD( 2 )
    n17 = Func_Overlay(prn)
    { n0 = new NodeChoice(n17, 16, 34); }
  |
    LOOKAHEAD( 2 )
    n18 = Func_Position(prn)
    { n0 = new NodeChoice(n18, 17, 34); }
  |
    LOOKAHEAD( 4 )
    n19 = Func_Substring(prn)
    { n0 = new NodeChoice(n19, 18, 34); }
  |
    LOOKAHEAD( 2 )
    n20 = Func_ClockTimeStamp(prn)
    { n0 = new NodeChoice(n20, 19, 34); }
  |
    LOOKAHEAD( 2 )
    n21 = Func_StatementTimeStamp(prn)
    { n0 = new NodeChoice(n21, 20, 34); }
  |
    LOOKAHEAD( 2 )
    n22 = Func_TransactionTimeStamp(prn)
    { n0 = new NodeChoice(n22, 21, 34); }
  |
    LOOKAHEAD( 2 )
    n23 = Func_CurrentDatabase(prn)
    { n0 = new NodeChoice(n23, 22, 34); }
  |
    LOOKAHEAD( 2 )
    n24 = Func_CurrentSchema(prn)
    { n0 = new NodeChoice(n24, 23, 34); }
  |
    LOOKAHEAD( 2 )
    n25 = Func_Version(prn)
    { n0 = new NodeChoice(n25, 24, 34); }
  |
    LOOKAHEAD( 2 )
    n26 = Func_BitAnd(prn)
    { n0 = new NodeChoice(n26, 25, 34); }
  |
    LOOKAHEAD( 2 )
    n27 = Func_BitOr(prn)
    { n0 = new NodeChoice(n27, 26, 34); }
  |
    LOOKAHEAD( 2 )
    n28 = Func_BoolAnd(prn)
    { n0 = new NodeChoice(n28, 27, 34); }
  |
    LOOKAHEAD( 2 )
    n29 = Func_BoolOr(prn)
    { n0 = new NodeChoice(n29, 28, 34); }
  |
    LOOKAHEAD( 2 )
    n30 = Func_CorrCov(prn)
    { n0 = new NodeChoice(n30, 29, 34); }
  |
    LOOKAHEAD( 2 )
    n31 = Func_Regr(prn)
    { n0 = new NodeChoice(n31, 30, 34); }
  |
    LOOKAHEAD( 2 )
    n32 = Func_Coalesce(prn)
    { n0 = new NodeChoice(n32, 31, 34); }
  |
    LOOKAHEAD( 2 )
    n33 = Func_NullIf(prn)
    { n0 = new NodeChoice(n33, 32, 34); }
  |
    LOOKAHEAD( 2 )
    n34 = Func_Custom(prn)
    { n0 = new NodeChoice(n34, 33, 34); }
  )
  { return new FunctionCall(n0); }
}

Func_Custom Func_Custom(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  SQLArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n0 = Identifier(prn)
  n2 = < PARENTHESIS_START_ >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  [
    n4 = SQLArgumentList(prn)
    { n3.addNode(n4); }
  ]
  n6 = < PARENTHESIS_CLOSE_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new Func_Custom(n0, n1, n3, n5); }
}

Func_NullIf Func_NullIf(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgument n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < NULLIF_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgument(prn)
  n6 = ","
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_NullIf(n0, n2, n4, n5, n7, n8); }
}

Func_Coalesce Func_Coalesce(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < COALESCE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgumentList(prn)
  n6 = < PARENTHESIS_CLOSE_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new Func_Coalesce(n0, n2, n4, n5); }
}

Func_ClockTimeStamp Func_ClockTimeStamp(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < CLOCK_TIMESTAMP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(2); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n7 = < PARENTHESIS_CLOSE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  ]
  { return new Func_ClockTimeStamp(n0, n2); }
}

Func_StatementTimeStamp Func_StatementTimeStamp(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < STATEMENT_TIMESTAMP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(2); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n7 = < PARENTHESIS_CLOSE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  ]
  { return new Func_StatementTimeStamp(n0, n2); }
}

Func_TransactionTimeStamp Func_TransactionTimeStamp(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < TRANSACTION_TIMESTAMP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(2); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n7 = < PARENTHESIS_CLOSE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  ]
  { return new Func_TransactionTimeStamp(n0, n2); }
}

Func_CurrentDatabase Func_CurrentDatabase(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < CURRENT_DATABASE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(2); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n7 = < PARENTHESIS_CLOSE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  ]
  { return new Func_CurrentDatabase(n0, n2); }
}

Func_CurrentSchema Func_CurrentSchema(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < CURRENT_SCHEMA_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(2); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n7 = < PARENTHESIS_CLOSE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  ]
  { return new Func_CurrentSchema(n0, n2); }
}

Func_Version Func_Version(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < VERSION_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < PARENTHESIS_CLOSE_ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new Func_Version(n0, n2, n4); }
}

Func_BitAnd Func_BitAnd(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < BIT_AND_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_BitAnd(n0, n2, n4, n7, n8); }
}

Func_BitOr Func_BitOr(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < BIT_OR_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_BitOr(n0, n2, n4, n7, n8); }
}

Func_BoolAnd Func_BoolAnd(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeToken n8 = null;
  Token n9 = null;
  SQLArgument n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  (
    (
      n2 = < BOOL_AND_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < EVERY_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  n6 = < PARENTHESIS_START_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  [
    n9 = < DISTINCT_ >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n7.addNode(n8); }
  ]
  n10 = SQLArgument(prn)
  n12 = < PARENTHESIS_CLOSE_ >
  { n11 = JTBToolkit.makeNodeToken(n12); }
  { return new Func_BoolAnd(n0, n5, n7, n10, n11); }
}

Func_BoolOr Func_BoolOr(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < BOOL_OR_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_BoolOr(n0, n2, n4, n7, n8); }
}

Func_CorrCov Func_CorrCov(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SQLArgument n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SQLArgument n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    (
      n2 = < CORR_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < COVAR_POP_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < COVAR_SAMP_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  n8 = < PARENTHESIS_START_ >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = SQLArgument(prn)
  n11 = ","
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n12 = SQLArgument(prn)
  n14 = < PARENTHESIS_CLOSE_ >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new Func_CorrCov(n0, n7, n9, n10, n12, n13); }
}

Func_Regr Func_Regr(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  SQLArgument n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  SQLArgument n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
}
{
  (
    (
      n2 = < REGR_AVGX_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 9); }
    |
      n4 = < REGR_AVGY_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 9); }
    |
      n6 = < REGR_COUNT_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 9); }
    |
      n8 = < REGR_INTERCEPT_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 9); }
    |
      n10 = < REGR_R2_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 9); }
    |
      n12 = < REGR_SLOPE_ >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 9); }
    |
      n14 = < REGR_SXX_ >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 9); }
    |
      n16 = < REGR_SXY_ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 9); }
    |
      n18 = < REGR_SYY_ >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 9); }
    )
    
  )
  n20 = < PARENTHESIS_START_ >
  { n19 = JTBToolkit.makeNodeToken(n20); }
  n21 = SQLArgument(prn)
  n23 = ","
  { n22 = JTBToolkit.makeNodeToken(n23); }
  n24 = SQLArgument(prn)
  n26 = < PARENTHESIS_CLOSE_ >
  { n25 = JTBToolkit.makeNodeToken(n26); }
  { return new Func_Regr(n0, n19, n21, n22, n24, n25); }
}

Func_Substring Func_Substring(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgument n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SQLArgument n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  SQLArgument n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  n1 = < SUBSTRING_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgument(prn)
  [
    { n6 = new NodeSequence(2); }
    n8 = < FROM_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n9 = SQLArgument(prn)
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  ]
  [
    { n11 = new NodeSequence(2); }
    n13 = < FOR_ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n11.addNode(n12); }
    n14 = SQLArgument(prn)
    { n11.addNode(n14); }
    { n10.addNode(n11); }
  ]
  n16 = < PARENTHESIS_CLOSE_ >
  { n15 = JTBToolkit.makeNodeToken(n16); }
  { return new Func_Substring(n0, n2, n4, n5, n10, n15); }
}

Func_Position Func_Position(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgument n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < POSITION_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgument(prn)
  n6 = < IN_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_Position(n0, n2, n4, n5, n7, n8); }
}

Func_Overlay Func_Overlay(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgument n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  SQLArgument n10 = null;
  NodeOptional n11 = new NodeOptional();
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  SQLArgument n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  n1 = < OVERLAY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgument(prn)
  n6 = < PLACING_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = SQLArgument(prn)
  n9 = < FROM_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = SQLArgument(prn)
  [
    { n12 = new NodeSequence(2); }
    n14 = < FOR_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n12.addNode(n13); }
    n15 = SQLArgument(prn)
    { n12.addNode(n15); }
    { n11.addNode(n12); }
  ]
  n17 = < PARENTHESIS_CLOSE_ >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  { return new Func_Overlay(n0, n2, n4, n5, n7, n8, n10, n11, n16); }
}

Func_Convert Func_Convert(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgument n4 = null;
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeChoice n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Identifier n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeChoice n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Identifier n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
}
{
  n1 = < CONVERT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgument(prn)
  (
    (
      n7 = < USING_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5 = new NodeChoice(n6, 0, 2); }
    |
      n9 = ","
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5 = new NodeChoice(n8, 1, 2); }
    )
    
  )
  (
    (
      n12 = < STRING_LITERAL >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10 = new NodeChoice(n11, 0, 2); }
    |
      n13 = Identifier(prn)
      { n10 = new NodeChoice(n13, 1, 2); }
    )
    
  )
  [
    { n15 = new NodeSequence(2); }
    n17 = ","
    { n16 = JTBToolkit.makeNodeToken(n17); }
    { n15.addNode(n16); }
    (
      (
        n20 = < STRING_LITERAL >
        { n19 = JTBToolkit.makeNodeToken(n20); }
        { n18 = new NodeChoice(n19, 0, 2); }
      |
        n21 = Identifier(prn)
        { n18 = new NodeChoice(n21, 1, 2); }
      )
      
    )
    { n15.addNode(n18); }
    { n14.addNode(n15); }
  ]
  n23 = < PARENTHESIS_CLOSE_ >
  { n22 = JTBToolkit.makeNodeToken(n23); }
  { return new Func_Convert(n0, n2, n4, n5, n10, n14, n22); }
}

Func_Extract Func_Extract(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  SQLArgument n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
}
{
  n1 = < EXTRACT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n6 = < YEAR_FROM >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4 = new NodeChoice(n5, 0, 16); }
    |
      n8 = < QUARTER_FROM >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4 = new NodeChoice(n7, 1, 16); }
    |
      n10 = < MONTH_FROM >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n4 = new NodeChoice(n9, 2, 16); }
    |
      n12 = < WEEK_FROM >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n4 = new NodeChoice(n11, 3, 16); }
    |
      n14 = < DAY_FROM >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n4 = new NodeChoice(n13, 4, 16); }
    |
      n16 = < HOUR_FROM >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n4 = new NodeChoice(n15, 5, 16); }
    |
      n18 = < MINUTE_FROM >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n4 = new NodeChoice(n17, 6, 16); }
    |
      n20 = < SECOND_FROM >
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n4 = new NodeChoice(n19, 7, 16); }
    |
      n22 = < DOY_FROM >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n4 = new NodeChoice(n21, 8, 16); }
    |
      n24 = < DOW_FROM >
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n4 = new NodeChoice(n23, 9, 16); }
    |
      n26 = < DECADE_FROM >
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n4 = new NodeChoice(n25, 10, 16); }
    |
      n28 = < CENTURY_FROM >
      { n27 = JTBToolkit.makeNodeToken(n28); }
      { n4 = new NodeChoice(n27, 11, 16); }
    |
      n30 = < MILLISECOND_FROM >
      { n29 = JTBToolkit.makeNodeToken(n30); }
      { n4 = new NodeChoice(n29, 12, 16); }
    |
      n32 = < MILLENNIUM_FROM >
      { n31 = JTBToolkit.makeNodeToken(n32); }
      { n4 = new NodeChoice(n31, 13, 16); }
    |
      n34 = < MICROSECONDS_FROM >
      { n33 = JTBToolkit.makeNodeToken(n34); }
      { n4 = new NodeChoice(n33, 14, 16); }
    |
      n36 = < EPOCH_FROM >
      { n35 = JTBToolkit.makeNodeToken(n36); }
      { n4 = new NodeChoice(n35, 15, 16); }
    )
    
  )
  n37 = SQLArgument(prn)
  n39 = < PARENTHESIS_CLOSE_ >
  { n38 = JTBToolkit.makeNodeToken(n39); }
  { return new Func_Extract(n0, n2, n4, n37, n38); }
}

Func_User Func_User(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  (
    (
      n2 = < USER_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < CURRENT_USER_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  [
    { n6 = new NodeSequence(2); }
    n8 = < PARENTHESIS_START_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n10 = < PARENTHESIS_CLOSE_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  ]
  { return new Func_User(n0, n5); }
}

Func_Case Func_Case(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLSimpleExpression n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SQLSimpleExpression n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SQLSimpleExpression n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  SQLSimpleExpression n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeListOptional n23 = new NodeListOptional();
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  SQLComplexExpression n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  SQLSimpleExpression n30 = null;
  NodeOptional n31 = new NodeOptional();
  NodeSequence n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  SQLSimpleExpression n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
}
{
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(5); }
    n3 = < CASE_ >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = SQLSimpleExpression(prn)
    { n1.addNode(n4); }
    (
      { n6 = new NodeSequence(4); }
      n8 = < WHEN_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = SQLSimpleExpression(prn)
      { n6.addNode(n9); }
      n11 = < THEN_ >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      n12 = SQLSimpleExpression(prn)
      { n6.addNode(n12); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n1.addNode(n5); }
    [
      { n14 = new NodeSequence(2); }
      n16 = < ELSE_ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17 = SQLSimpleExpression(prn)
      { n14.addNode(n17); }
      { n13.addNode(n14); }
    ]
    { n1.addNode(n13); }
    n19 = < END_ >
    { n18 = JTBToolkit.makeNodeToken(n19); }
    { n1.addNode(n18); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n20 = new NodeSequence(4); }
    n22 = < CASE_ >
    { n21 = JTBToolkit.makeNodeToken(n22); }
    { n20.addNode(n21); }
    (
      { n24 = new NodeSequence(4); }
      n26 = < WHEN_ >
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
      n27 = SQLComplexExpression(prn)
      { n24.addNode(n27); }
      n29 = < THEN_ >
      { n28 = JTBToolkit.makeNodeToken(n29); }
      { n24.addNode(n28); }
      n30 = SQLSimpleExpression(prn)
      { n24.addNode(n30); }
      { n23.addNode(n24); }
    )*
    { n23.nodes.trimToSize(); }
    { n20.addNode(n23); }
    [
      { n32 = new NodeSequence(2); }
      n34 = < ELSE_ >
      { n33 = JTBToolkit.makeNodeToken(n34); }
      { n32.addNode(n33); }
      n35 = SQLSimpleExpression(prn)
      { n32.addNode(n35); }
      { n31.addNode(n32); }
    ]
    { n20.addNode(n31); }
    n37 = < END_ >
    { n36 = JTBToolkit.makeNodeToken(n37); }
    { n20.addNode(n36); }
    { n0 = new NodeChoice(n20, 1, 2); }
  )
  { return new Func_Case(n0); }
}

Func_Trim Func_Trim(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = new NodeOptional();
  SQLArgument n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  SQLArgument n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  n1 = < TRIM_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n6 = < BOTH >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4 = new NodeChoice(n5, 0, 3); }
    |
      n8 = < LEADING >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4 = new NodeChoice(n7, 1, 3); }
    |
      n10 = < TRAILING >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n4 = new NodeChoice(n9, 2, 3); }
    )
    
  )
  [
    n12 = SQLArgument(prn)
    { n11.addNode(n12); }
  ]
  n14 = < FROM_ >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  n15 = SQLArgument(prn)
  n17 = < PARENTHESIS_CLOSE_ >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  { return new Func_Trim(n0, n2, n4, n11, n13, n15, n16); }
}

Func_Avg Func_Avg(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < AVERAGE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_Avg(n0, n2, n4, n7, n8); }
}

Func_Count Func_Count(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  SQLArgument n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  n1 = < COUNT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n6 = < STAR_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4 = new NodeChoice(n5, 0, 2); }
    |
      { n7 = new NodeSequence(2); }
      [
        (
          n11 = < DISTINCT_ >
          { n10 = JTBToolkit.makeNodeToken(n11); }
          { n9 = new NodeChoice(n10, 0, 2); }
        |
          n13 = < ALL_ >
          { n12 = JTBToolkit.makeNodeToken(n13); }
          { n9 = new NodeChoice(n12, 1, 2); }
        )
        { n8.addNode(n9); }
      ]
      { n7.addNode(n8); }
      n14 = SQLArgument(prn)
      { n7.addNode(n14); }
      { n4 = new NodeChoice(n7, 1, 2); }
    )
    
  )
  n16 = < PARENTHESIS_CLOSE_ >
  { n15 = JTBToolkit.makeNodeToken(n16); }
  { return new Func_Count(n0, n2, n4, n15); }
}

Func_Max Func_Max(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < MAX_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_Max(n0, n2, n4, n7, n8); }
}

Func_Min Func_Min(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < MIN_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_Min(n0, n2, n4, n7, n8); }
}

Func_Stdev Func_Stdev(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  NodeToken n10 = null;
  Token n11 = null;
  SQLArgument n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    (
      n2 = < STDDEV_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < STDDEV_POP_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < STDDEV_SAMP_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  n8 = < PARENTHESIS_START_ >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  [
    n11 = < DISTINCT_ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n9.addNode(n10); }
  ]
  n12 = SQLArgument(prn)
  n14 = < PARENTHESIS_CLOSE_ >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new Func_Stdev(n0, n7, n9, n12, n13); }
}

Func_Variance Func_Variance(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeToken n14 = null;
  Token n15 = null;
  SQLArgument n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
}
{
  (
    (
      n2 = < VARIANCE_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 5); }
    |
      n4 = < VARIANCE_POP_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 5); }
    |
      n6 = < VARIANCE_SAMP_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 5); }
    |
      n8 = < VAR_POP_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 5); }
    |
      n10 = < VAR_SAMP_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 5); }
    )
    
  )
  n12 = < PARENTHESIS_START_ >
  { n11 = JTBToolkit.makeNodeToken(n12); }
  [
    n15 = < DISTINCT_ >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n13.addNode(n14); }
  ]
  n16 = SQLArgument(prn)
  n18 = < PARENTHESIS_CLOSE_ >
  { n17 = JTBToolkit.makeNodeToken(n18); }
  { return new Func_Variance(n0, n11, n13, n16, n17); }
}

Func_Sum Func_Sum(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  SQLArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < SUM_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < DISTINCT_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  n7 = SQLArgument(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Func_Sum(n0, n2, n4, n7, n8); }
}

length length(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INT_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new length(n0); }
}

position position(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INT_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new position(n0); }
}

/*Table Column Specification*/
TableColumn TableColumn(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  extendbObject n0 = null;
}
{
  n0 = extendbObject(prn)
  { return new TableColumn(n0); }
}

extendbObject extendbObject(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  TableName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  Identifier n6 = null;
}
{
  (
    (
      LOOKAHEAD( 2 )
      { n1 = new NodeSequence(3); }
      n2 = TableName(prn)
      { n1.addNode(n2); }
      n4 = "."
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      n5 = Identifier(prn)
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n6 = Identifier(prn)
      { n0 = new NodeChoice(n6, 1, 2); }
    )
    
  )
  { return new extendbObject(n0); }
}

/*********
	Simple Expression-- Ends -- This will become a production in the branch of relationalexpression
	allowing us to mix logical and expressions using relational operators.
********/
SelectAliasSpec SelectAliasSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  AliasName n3 = null;
}
{
  [
    n2 = < AS_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n3 = AliasName(prn)
  { return new SelectAliasSpec(n0, n3); }
}

AliasName AliasName(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
}
{
  n0 = Identifier(prn)
  { return new AliasName(n0); }
}

SQLComplexExpression SQLComplexExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLAndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  SQLORExpression n2 = null;
}
{
  n0 = SQLAndExpression(prn)
  (
    n2 = SQLORExpression(prn)
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SQLComplexExpression(n0, n1); }
}

/***********************
Expansion For select list ends
********************/
/*****************************
SQL Logical Expression Starts here
******************************/
SQLAndExpression SQLAndExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLUnaryLogicalExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  SQLAndExp n5 = null;
}
{
  n0 = SQLUnaryLogicalExpression(prn)
  [
    LOOKAHEAD( 2 )
    n3 = < LEFTOUTER_ >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
  ]
  (
    n5 = SQLAndExp(prn)
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  { return new SQLAndExpression(n0, n1, n4); }
}

SQLORExpression SQLORExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SQLAndExpression n2 = null;
}
{
  n1 = < OR_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SQLAndExpression(prn)
  { return new SQLORExpression(n0, n2); }
}

SQLAndExp SQLAndExp(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SQLUnaryLogicalExpression n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < AND_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SQLUnaryLogicalExpression(prn)
  [
    LOOKAHEAD( 2 )
    n5 = < LEFTOUTER_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
  ]
  { return new SQLAndExp(n0, n2, n3); }
}

SQLUnaryLogicalExpression SQLUnaryLogicalExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ExistsClause n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeToken n4 = null;
  Token n5 = null;
  SQLCondResult n6 = null;
  NodeSequence n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  SQLRelationalExpression n11 = null;
}
{
  (
    (
      LOOKAHEAD( 2 )
      n1 = ExistsClause(prn)
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      LOOKAHEAD( 2 )
      { n2 = new NodeSequence(2); }
      [
        n5 = < NOT_ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3.addNode(n4); }
      ]
      { n2.addNode(n3); }
      n6 = SQLCondResult(prn)
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1, 3); }
    |
      LOOKAHEAD( 2 )
      { n7 = new NodeSequence(2); }
      [
        n10 = < NOT_ >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n8.addNode(n9); }
      ]
      { n7.addNode(n8); }
      n11 = SQLRelationalExpression(prn)
      { n7.addNode(n11); }
      { n0 = new NodeChoice(n7, 2, 3); }
    )
    
  )
  { return new SQLUnaryLogicalExpression(n0); }
}

SQLCondResult SQLCondResult(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < TRUE_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FALSE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new SQLCondResult(n0); }
}

ExistsClause ExistsClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  SubQuery n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  [
    n2 = < NOT_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n4 = "EXISTS"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = < PARENTHESIS_START_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = SubQuery(prn)
  n9 = < PARENTHESIS_CLOSE_ >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new ExistsClause(n0, n3, n5, n7, n8); }
}

SQLRelationalExpression SQLRelationalExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  SQLExpressionList n1 = null;
  SQLSimpleExpression n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeChoice n4 = null;
  SQLRelationalOperatorExpression n5 = null;
  NodeChoice n6 = null;
  SQLInClause n7 = null;
  SQLBetweenClause n8 = null;
  SQLLikeClause n9 = null;
  IsNullClause n10 = null;
  IsBooleanClause n11 = null;
}
{
  (
    (
      LOOKAHEAD( < PARENTHESIS_START_ > SQLSimpleExpression(prn) "," )
      n1 = SQLExpressionList(prn)
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n2 = SQLSimpleExpression(prn)
      { n0 = new NodeChoice(n2, 1, 2); }
    )
    
  )
  (
    (
      LOOKAHEAD( 2 )
      n5 = SQLRelationalOperatorExpression(prn)
      { n4 = new NodeChoice(n5, 0, 4); }
    |
      (
        (
          LOOKAHEAD( 2 )
          n7 = SQLInClause(prn)
          { n6 = new NodeChoice(n7, 0, 3); }
        |
          LOOKAHEAD( 2 )
          n8 = SQLBetweenClause(prn)
          { n6 = new NodeChoice(n8, 1, 3); }
        |
          LOOKAHEAD( 2 )
          n9 = SQLLikeClause(prn)
          { n6 = new NodeChoice(n9, 2, 3); }
        )
        
      )
      { n4 = new NodeChoice(n6, 1, 4); }
    |
      LOOKAHEAD( 3 )
      n10 = IsNullClause(prn)
      { n4 = new NodeChoice(n10, 2, 4); }
    |
      n11 = IsBooleanClause(prn)
      { n4 = new NodeChoice(n11, 3, 4); }
    )
    { n3.addNode(n4); }
  )?
  { return new SQLRelationalExpression(n0, n3); }
}

SQLRelationalOperatorExpression SQLRelationalOperatorExpression(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Relop n0 = null;
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeChoice n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  SubQuery n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  SQLExpressionList n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  SQLSimpleExpression n24 = null;
}
{
  n0 = Relop(prn)
  (
    (
      LOOKAHEAD( "ANY" | "ALL" | "SOME" )
      { n2 = new NodeSequence(2); }
      [
        (
          n6 = "ALL"
          { n5 = JTBToolkit.makeNodeToken(n6); }
          { n4 = new NodeChoice(n5, 0, 3); }
        |
          n8 = "ANY"
          { n7 = JTBToolkit.makeNodeToken(n8); }
          { n4 = new NodeChoice(n7, 1, 3); }
        |
          n10 = "SOME"
          { n9 = JTBToolkit.makeNodeToken(n10); }
          { n4 = new NodeChoice(n9, 2, 3); }
        )
        { n3.addNode(n4); }
      ]
      { n2.addNode(n3); }
      (
        (
          LOOKAHEAD( < PARENTHESIS_START_ > SubQuery(prn) )
          { n12 = new NodeSequence(3); }
          n14 = < PARENTHESIS_START_ >
          { n13 = JTBToolkit.makeNodeToken(n14); }
          { n12.addNode(n13); }
          n15 = SubQuery(prn)
          { n12.addNode(n15); }
          n17 = < PARENTHESIS_CLOSE_ >
          { n16 = JTBToolkit.makeNodeToken(n17); }
          { n12.addNode(n16); }
          { n11 = new NodeChoice(n12, 0, 2); }
        |
          { n18 = new NodeSequence(3); }
          n20 = < PARENTHESIS_START_ >
          { n19 = JTBToolkit.makeNodeToken(n20); }
          { n18.addNode(n19); }
          n21 = SQLExpressionList(prn)
          { n18.addNode(n21); }
          n23 = < PARENTHESIS_CLOSE_ >
          { n22 = JTBToolkit.makeNodeToken(n23); }
          { n18.addNode(n22); }
          { n11 = new NodeChoice(n18, 1, 2); }
        )
        
      )
      { n2.addNode(n11); }
      { n1 = new NodeChoice(n2, 0, 2); }
    |
      n24 = SQLSimpleExpression(prn)
      { n1 = new NodeChoice(n24, 1, 2); }
    )
    
  )
  { return new SQLRelationalOperatorExpression(n0, n1); }
}

Relop Relop(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
}
{
  (
    (
      n2 = "="
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 20); }
    |
      n4 = "!="
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 20); }
    |
      n6 = "#"
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 20); }
    |
      n8 = "<>"
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 20); }
    |
      n10 = ">"
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 20); }
    |
      n12 = ">="
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 20); }
    |
      n14 = "<"
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 20); }
    |
      n16 = "<="
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 20); }
    |
      n18 = "&&"
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 20); }
    |
      n20 = "&<"
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9, 20); }
    |
      n22 = "&<|"
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10, 20); }
    |
      n24 = "&>"
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11, 20); }
    |
      n26 = "<<"
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12, 20); }
    |
      n28 = "<<|"
      { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13, 20); }
    |
      n30 = ">>"
      { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14, 20); }
    |
      n32 = "@"
      { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15, 20); }
    |
      n34 = "|&>"
      { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16, 20); }
    |
      n36 = "|>>"
      { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17, 20); }
    |
      n38 = "~"
      { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18, 20); }
    |
      n40 = "~="
      { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19, 20); }
    )
    
  )
  { return new Relop(n0); }
}

SQLInClause SQLInClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  SubQuery n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  SQLExpressionList n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  [
    n2 = < NOT_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n4 = < IN_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    (
      LOOKAHEAD( < PARENTHESIS_START_ > SubQuery(prn) )
      { n6 = new NodeSequence(2); }
      n8 = < PARENTHESIS_START_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = SubQuery(prn)
      { n6.addNode(n9); }
      { n5 = new NodeChoice(n6, 0, 2); }
    |
      { n10 = new NodeSequence(2); }
      n12 = < PARENTHESIS_START_ >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13 = SQLExpressionList(prn)
      { n10.addNode(n13); }
      { n5 = new NodeChoice(n10, 1, 2); }
    )
    
  )
  n15 = < PARENTHESIS_CLOSE_ >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  { return new SQLInClause(n0, n3, n5, n14); }
}

SQLBetweenClause SQLBetweenClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SQLSimpleExpression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SQLSimpleExpression n8 = null;
}
{
  [
    n2 = < NOT_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  ]
  n4 = < BETWEEN_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = SQLSimpleExpression(prn)
  n7 = "AND"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = SQLSimpleExpression(prn)
  { return new SQLBetweenClause(n0, n3, n5, n6, n8); }
}

SQLLikeClause SQLLikeClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SQLSimpleExpression n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  SQLSimpleExpression n17 = null;
  NodeSequence n18 = null;
  NodeChoice n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  SQLSimpleExpression n30 = null;
}
{
  (
    (
      { n1 = new NodeSequence(4); }
      [
        n4 = < NOT_ >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2.addNode(n3); }
      ]
      { n1.addNode(n2); }
      (
        (
          n7 = < LIKE_ >
          { n6 = JTBToolkit.makeNodeToken(n7); }
          { n5 = new NodeChoice(n6, 0, 3); }
        |
          n9 = < ILIKE_ >
          { n8 = JTBToolkit.makeNodeToken(n9); }
          { n5 = new NodeChoice(n8, 1, 3); }
        |
          n11 = < SIMILAR_TO_ >
          { n10 = JTBToolkit.makeNodeToken(n11); }
          { n5 = new NodeChoice(n10, 2, 3); }
        )
        
      )
      { n1.addNode(n5); }
      n12 = SQLSimpleExpression(prn)
      { n1.addNode(n12); }
      [
        { n14 = new NodeSequence(2); }
        n16 = < ESCAPE_ >
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n14.addNode(n15); }
        n17 = SQLSimpleExpression(prn)
        { n14.addNode(n17); }
        { n13.addNode(n14); }
      ]
      { n1.addNode(n13); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n18 = new NodeSequence(2); }
      (
        (
          n21 = < NOT_BITWISE_ >
          { n20 = JTBToolkit.makeNodeToken(n21); }
          { n19 = new NodeChoice(n20, 0, 5); }
        |
          n23 = < REGEX_NOT_MATCHES_ >
          { n22 = JTBToolkit.makeNodeToken(n23); }
          { n19 = new NodeChoice(n22, 1, 5); }
        |
          n25 = < REGEX_MATCHES_CASE_INSTV_ >
          { n24 = JTBToolkit.makeNodeToken(n25); }
          { n19 = new NodeChoice(n24, 2, 5); }
        |
          n27 = < REGEX_NOT_MATCHES_CASE_INSTV_ >
          { n26 = JTBToolkit.makeNodeToken(n27); }
          { n19 = new NodeChoice(n26, 3, 5); }
        |
          n29 = < OVERLAPS_ >
          { n28 = JTBToolkit.makeNodeToken(n29); }
          { n19 = new NodeChoice(n28, 4, 5); }
        )
        
      )
      { n18.addNode(n19); }
      n30 = SQLSimpleExpression(prn)
      { n18.addNode(n30); }
      { n0 = new NodeChoice(n18, 1, 2); }
    )
    
  )
  { return new SQLLikeClause(n0); }
}

SubQuery SubQuery(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SelectWithoutOrder n0 = null;
}
{
  n0 = SelectWithoutOrder(prn)
  { return new SubQuery(n0); }
}

IsNullClause IsNullClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  (
    (
      { n1 = new NodeSequence(2); }
      n3 = "IS"
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      [
        n6 = < NOT_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4.addNode(n5); }
      ]
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n8 = "="
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 1, 3); }
    |
      n10 = "!="
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 2, 3); }
    )
    
  )
  n12 = "NULL"
  { n11 = JTBToolkit.makeNodeToken(n12); }
  { return new IsNullClause(n0, n11); }
}

IsBooleanClause IsBooleanClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeChoice n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  (
    (
      { n1 = new NodeSequence(2); }
      n3 = "IS"
      { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      [
        n6 = < NOT_ >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n4.addNode(n5); }
      ]
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n8 = "="
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 1, 3); }
    |
      n10 = "!="
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 2, 3); }
    )
    
  )
  (
    (
      n13 = "TRUE"
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11 = new NodeChoice(n12, 0, 2); }
    |
      n15 = "FALSE"
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n11 = new NodeChoice(n14, 1, 2); }
    )
    
  )
  { return new IsBooleanClause(n0, n11); }
}

/*
	Into Clause Starts Here
*/
IntoClause IntoClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  TableName n11 = null;
}
{
  n1 = < INTO_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    (
      n5 = < TEMPORARY_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n7 = < TEMP_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3 = new NodeChoice(n6, 1, 2); }
    )
    { n2.addNode(n3); }
  ]
  [
    n10 = < TABLE_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n8.addNode(n9); }
  ]
  n11 = TableName(prn)
  { return new IntoClause(n0, n2, n8, n11); }
}

/*
	From Clause Starts Here
*/
FromClause FromClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TableList n2 = null;
}
{
  n1 = < FROM_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = TableList(prn)
  { return new FromClause(n0, n2); }
}

TableSpec TableSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  TableName n5 = null;
  NodeOptional n6 = new NodeOptional();
  SelectAliasSpec n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  SelectWithoutOrder n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = new NodeOptional();
  SelectAliasSpec n15 = null;
  NodeOptional n16 = new NodeOptional();
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  ColumnNameList n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    [
      LOOKAHEAD( 2 )
      n4 = < ONLY_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
    ]
    { n1.addNode(n2); }
    n5 = TableName(prn)
    { n1.addNode(n5); }
    [
      LOOKAHEAD( 2 )
      n7 = SelectAliasSpec(prn)
      { n6.addNode(n7); }
    ]
    { n1.addNode(n6); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n8 = new NodeSequence(5); }
    n10 = < PARENTHESIS_START_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n8.addNode(n9); }
    n11 = SelectWithoutOrder(prn)
    { n8.addNode(n11); }
    n13 = < PARENTHESIS_CLOSE_ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n8.addNode(n12); }
    [
      LOOKAHEAD( 2 )
      n15 = SelectAliasSpec(prn)
      { n14.addNode(n15); }
    ]
    { n8.addNode(n14); }
    [
      { n17 = new NodeSequence(3); }
      n19 = < PARENTHESIS_START_ >
      { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n20 = ColumnNameList(prn)
      { n17.addNode(n20); }
      n22 = < PARENTHESIS_CLOSE_ >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n17.addNode(n21); }
      { n16.addNode(n17); }
    ]
    { n8.addNode(n16); }
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { return new TableSpec(n0); }
}

TableList TableList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  FromTableSpec n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  FromTableSpec n5 = null;
}
{
  n0 = FromTableSpec(prn)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = FromTableSpec(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new TableList(n0, n1); }
}

FromTableSpec FromTableSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  TableSpec n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  TableSpec n8 = null;
  NodeChoice n9 = null;
  NodeSequence n10 = null;
  NodeOptional n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  TableSpec n16 = null;
  JoinSpec n17 = null;
  NodeSequence n18 = null;
  NodeChoice n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeOptional n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  TableSpec n31 = null;
  JoinSpec n32 = null;
  NodeSequence n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeChoice n36 = null;
  NodeSequence n37 = null;
  NodeOptional n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeToken n41 = null;
  Token n42 = null;
  TableSpec n43 = null;
  NodeSequence n44 = null;
  NodeChoice n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  NodeToken n48 = null;
  Token n49 = null;
  NodeToken n50 = null;
  Token n51 = null;
  NodeOptional n52 = null;
  NodeToken n53 = null;
  Token n54 = null;
  NodeToken n55 = null;
  Token n56 = null;
  TableSpec n57 = null;
}
{
  n0 = TableSpec(prn)
  (
    { n11 = new NodeOptional(); }
    { n26 = new NodeOptional(); }
    { n38 = new NodeOptional(); }
    { n52 = new NodeOptional(); }
    (
      { n3 = new NodeSequence(3); }
      n5 = < CROSS_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7 = < JOIN_ >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      n8 = TableSpec(prn)
      { n3.addNode(n8); }
      { n2 = new NodeChoice(n3, 0, 3); }
    |
      (
        (
          { n10 = new NodeSequence(4); }
          [
            n13 = < INNER_ >
            { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
          ]
          { n10.addNode(n11); }
          n15 = < JOIN_ >
          { n14 = JTBToolkit.makeNodeToken(n15); }
          { n10.addNode(n14); }
          n16 = TableSpec(prn)
          { n10.addNode(n16); }
          n17 = JoinSpec(prn)
          { n10.addNode(n17); }
          { n9 = new NodeChoice(n10, 0, 2); }
        |
          { n18 = new NodeSequence(5); }
          (
            (
              n21 = < LEFT_ >
              { n20 = JTBToolkit.makeNodeToken(n21); }
              { n19 = new NodeChoice(n20, 0, 3); }
            |
              n23 = < RIGHT_ >
              { n22 = JTBToolkit.makeNodeToken(n23); }
              { n19 = new NodeChoice(n22, 1, 3); }
            |
              n25 = < FULL_ >
              { n24 = JTBToolkit.makeNodeToken(n25); }
              { n19 = new NodeChoice(n24, 2, 3); }
            )
            
          )
          { n18.addNode(n19); }
          [
            n28 = < OUTER_ >
            { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
          ]
          { n18.addNode(n26); }
          n30 = < JOIN_ >
          { n29 = JTBToolkit.makeNodeToken(n30); }
          { n18.addNode(n29); }
          n31 = TableSpec(prn)
          { n18.addNode(n31); }
          n32 = JoinSpec(prn)
          { n18.addNode(n32); }
          { n9 = new NodeChoice(n18, 1, 2); }
        )
        
      )
      { n2 = new NodeChoice(n9, 1, 3); }
    |
      { n33 = new NodeSequence(2); }
      n35 = < NATURAL_ >
      { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      (
        (
          { n37 = new NodeSequence(3); }
          [
            n40 = < INNER_ >
            { n39 = JTBToolkit.makeNodeToken(n40); }
            { n38.addNode(n39); }
          ]
          { n37.addNode(n38); }
          n42 = < JOIN_ >
          { n41 = JTBToolkit.makeNodeToken(n42); }
          { n37.addNode(n41); }
          n43 = TableSpec(prn)
          { n37.addNode(n43); }
          { n36 = new NodeChoice(n37, 0, 2); }
        |
          { n44 = new NodeSequence(4); }
          (
            (
              n47 = < LEFT_ >
              { n46 = JTBToolkit.makeNodeToken(n47); }
              { n45 = new NodeChoice(n46, 0, 3); }
            |
              n49 = < RIGHT_ >
              { n48 = JTBToolkit.makeNodeToken(n49); }
              { n45 = new NodeChoice(n48, 1, 3); }
            |
              n51 = < FULL_ >
              { n50 = JTBToolkit.makeNodeToken(n51); }
              { n45 = new NodeChoice(n50, 2, 3); }
            )
            
          )
          { n44.addNode(n45); }
          [
            n54 = < OUTER_ >
            { n53 = JTBToolkit.makeNodeToken(n54); }
            { n52.addNode(n53); }
          ]
          { n44.addNode(n52); }
          n56 = < JOIN_ >
          { n55 = JTBToolkit.makeNodeToken(n56); }
          { n44.addNode(n55); }
          n57 = TableSpec(prn)
          { n44.addNode(n57); }
          { n36 = new NodeChoice(n44, 1, 2); }
        )
        
      )
      { n33.addNode(n36); }
      { n2 = new NodeChoice(n33, 2, 3); }
    )
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new FromTableSpec(n0, n1); }
}

JoinSpec JoinSpec(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLComplexExpression n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  ColumnNameList n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = "ON"
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = SQLComplexExpression(prn)
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n5 = new NodeSequence(4); }
    n7 = < USING_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    n9 = < PARENTHESIS_START_ >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n5.addNode(n8); }
    n10 = ColumnNameList(prn)
    { n5.addNode(n10); }
    n12 = < PARENTHESIS_CLOSE_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n5.addNode(n11); }
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { return new JoinSpec(n0); }
}

/*
	FROM CLAUSE ENDS
*/
/*
	Where  Clause
*/
WhereClause WhereClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SQLComplexExpression n2 = null;
}
{
  n1 = < WHERE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SQLComplexExpression(prn)
  { return new WhereClause(n0, n2); }
}

/*
		Group by Claus
*/
GroupByClause GroupByClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SQLExpressionList n2 = null;
}
{
  n1 = < GROUP_BY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SQLExpressionList(prn)
  { return new GroupByClause(n0, n2); }
}

SQLExpressionList SQLExpressionList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLExpressionListItem n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  SQLExpressionListItem n5 = null;
}
{
  n0 = SQLExpressionListItem(prn)
  (
    LOOKAHEAD( "," SQLExpressionListItem(prn) )
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = SQLExpressionListItem(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SQLExpressionList(n0, n1); }
}

SQLExpressionListItem SQLExpressionListItem(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLSimpleExpression n0 = null;
}
{
  n0 = SQLSimpleExpression(prn)
  { return new SQLExpressionListItem(n0); }
}

HavingClause HavingClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SQLComplexExpression n2 = null;
}
{
  n1 = "HAVING"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = SQLComplexExpression(prn)
  { return new HavingClause(n0, n2); }
}

/*
	Order By clause
*/
OrderByClause OrderByClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  OrderByItem n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  OrderByItem n7 = null;
}
{
  n1 = < ORDER_BY_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = OrderByItem(prn)
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = OrderByItem(prn)
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { return new OrderByClause(n0, n2, n3); }
}

LimitClause LimitClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < LIMIT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < INT_LITERAL >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n6 = < ALL_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  { return new LimitClause(n0, n2); }
}

OffsetClause OffsetClause(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  n1 = < OFFSET_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new OffsetClause(n0, n2); }
}

OrderByItem OrderByItem(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  SQLSimpleExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n0 = SQLSimpleExpression(prn)
  [
    (
      n4 = "ASC"
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n6 = "DESC"
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2 = new NodeChoice(n5, 1, 2); }
    )
    { n1.addNode(n2); }
  ]
  { return new OrderByItem(n0, n1); }
}

Func_PgCurrentDate Func_PgCurrentDate(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < CURRENTDATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Func_PgCurrentDate(n0); }
}

Func_PgCurrentTime Func_PgCurrentTime(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  SQLArgument n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < CURRENT_TIME_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(3); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n6 = SQLArgument(prn)
    { n3.addNode(n6); }
    n8 = < PARENTHESIS_CLOSE_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n3.addNode(n7); }
    { n2.addNode(n3); }
  ]
  { return new Func_PgCurrentTime(n0, n2); }
}

Func_PgCurrentTimeStamp Func_PgCurrentTimeStamp(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  SQLArgument n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < CURRENT_TIMESTAMP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n3 = new NodeSequence(3); }
    n5 = < PARENTHESIS_START_ >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n3.addNode(n4); }
    n6 = SQLArgument(prn)
    { n3.addNode(n6); }
    n8 = < PARENTHESIS_CLOSE_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n3.addNode(n7); }
    { n2.addNode(n3); }
  ]
  { return new Func_PgCurrentTimeStamp(n0, n2); }
}

Func_Cast Func_Cast(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SQLArgument n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeChoice n7 = null;
  types n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n1 = < CAST_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_START_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = SQLArgument(prn)
  n6 = < AS_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  (
    (
      n8 = types()
      { n7 = new NodeChoice(n8, 0, 2); }
    |
      n10 = < NULL_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n7 = new NodeChoice(n9, 1, 2); }
    )
    
  )
  n12 = < PARENTHESIS_CLOSE_ >
  { n11 = JTBToolkit.makeNodeToken(n12); }
  { return new Func_Cast(n0, n2, n4, n5, n7, n11); }
}

/*
A list of Identifiers seprated by commas
*/
ColumnNameList ColumnNameList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
}
{
  n0 = Identifier(prn)
  (
    LOOKAHEAD( 2 )
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Identifier(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new ColumnNameList(n0, n1); }
}

TableName TableName(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Identifier n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Identifier n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Identifier n13 = null;
}
{
  (
    (
      n1 = Identifier(prn)
      { n0 = new NodeChoice(n1, 0, 4); }
    |
      { n2 = new NodeSequence(2); }
      n4 = < TEMPDOT_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5 = Identifier(prn)
      { n2.addNode(n5); }
      { n0 = new NodeChoice(n2, 1, 4); }
    |
      { n6 = new NodeSequence(2); }
      n8 = < PUBLICDOT_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = Identifier(prn)
      { n6.addNode(n9); }
      { n0 = new NodeChoice(n6, 2, 4); }
    |
      { n10 = new NodeSequence(2); }
      n12 = < QPUBLICDOT_ >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13 = Identifier(prn)
      { n10.addNode(n13); }
      { n0 = new NodeChoice(n10, 3, 4); }
    )
    
  )
  { return new TableName(n0); }
}

FloatingPointNumber FloatingPointNumber(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n2 = < DECIMAL_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < INT_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n6 = < SCIENTIFIC_LITERAL >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new FloatingPointNumber(n0); }
}

/*void ExpressionList(PrintStream prn):
{}
{

}*/
ShowAgents ShowAgents() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_AGENTS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowAgents(n0); }
}

ShowCluster ShowCluster() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_CLUSTER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowCluster(n0); }
}

ShowDatabases ShowDatabases() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_DATABASES_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowDatabases(n0); }
}

ShowStatements ShowStatements() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_STATEMENTS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowStatements(n0); }
}

ShowTables ShowTables() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_TABLES_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowTables(n0); }
}

ShowTranIsolation ShowTranIsolation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_TRAN_ISOLATION_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowTranIsolation(n0); }
}

BeginTransaction BeginTransaction() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < BEGIN_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    (
      (
        n5 = < TRANSACTION_ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        n7 = < TRAN_ >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 3); }
      |
        n9 = < WORK_ >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 3); }
      )
      
    )
    { n2.addNode(n3); }
  ]
  { return new BeginTransaction(n0, n2); }
}

CommitTransaction CommitTransaction() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  (
    (
      n2 = < COMMIT_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      n4 = < END_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
    
  )
  [
    (
      (
        n8 = < TRANSACTION_ >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n6 = new NodeChoice(n7, 0, 3); }
      |
        n10 = < TRAN_ >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n6 = new NodeChoice(n9, 1, 3); }
      |
        n12 = < WORK_ >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n6 = new NodeChoice(n11, 2, 3); }
      )
      
    )
    { n5.addNode(n6); }
  ]
  { return new CommitTransaction(n0, n5); }
}

RollbackTransaction RollbackTransaction() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < ROLLBACK_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    (
      (
        n5 = < TRANSACTION_ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        n7 = < TRAN_ >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 3); }
      |
        n9 = < WORK_ >
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 3); }
      )
      
    )
    { n2.addNode(n3); }
  ]
  { return new RollbackTransaction(n0, n2); }
}

DescribeTable DescribeTable(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TableName n7 = null;
}
{
  (
    (
      n2 = < DESCRIBE_ >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 3); }
    |
      n4 = < SHOW_TABLE_ >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 3); }
    |
      n6 = < SHOW_VIEW_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  n7 = TableName(prn)
  { return new DescribeTable(n0, n7); }
}

ShowConstraints ShowConstraints(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
}
{
  n1 = < SHOW_CONSTRAINTS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ON_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  { return new ShowConstraints(n0, n2, n4); }
}

ShowIndexes ShowIndexes(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TableName n4 = null;
}
{
  n1 = < SHOW_INDEXES_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < ON_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = TableName(prn)
  { return new ShowIndexes(n0, n2, n4); }
}

ShowUsers ShowUsers(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_USERS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowUsers(n0); }
}

ShowViews ShowViews(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < SHOW_VIEWS_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ShowViews(n0); }
}

Deallocate Deallocate(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
}
{
  n1 = < DEALLOCATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < PREPARE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n5 = Identifier(prn)
  { return new Deallocate(n0, n2, n5); }
}

CreateUser CreateUser(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeChoice n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  n1 = < CREATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < USER_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  n6 = < PASSWORD_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Identifier(prn)
  [
    (
      n11 = < DBA_ >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9 = new NodeChoice(n10, 0, 3); }
    |
      n13 = < RESOURCE_ >
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9 = new NodeChoice(n12, 1, 3); }
    |
      n15 = < STANDARD_ >
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n9 = new NodeChoice(n14, 2, 3); }
    )
    { n8.addNode(n9); }
  ]
  { return new CreateUser(n0, n2, n4, n5, n7, n8); }
}

DropUser DropUser(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
}
{
  n1 = < DROP_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < USER_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  { return new DropUser(n0, n2, n4); }
}

AlterUser AlterUser(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Identifier n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeChoice n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  n1 = < ALTER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < USER_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier(prn)
  [
    { n6 = new NodeSequence(2); }
    n8 = < PASSWORD_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
    n9 = Identifier(prn)
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  ]
  [
    (
      n13 = < DBA_ >
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11 = new NodeChoice(n12, 0, 3); }
    |
      n15 = < RESOURCE_ >
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n11 = new NodeChoice(n14, 1, 3); }
    |
      n17 = < STANDARD_ >
      { n16 = JTBToolkit.makeNodeToken(n17); }
      { n11 = new NodeChoice(n16, 2, 3); }
    )
    { n10.addNode(n11); }
  ]
  { return new AlterUser(n0, n2, n4, n5, n10); }
}

Grantee Grantee(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Identifier n3 = null;
}
{
  (
    n2 = < PUBLIC_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n3 = Identifier(prn)
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new Grantee(n0); }
}

GranteeList GranteeList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  Grantee n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Grantee n5 = null;
}
{
  n0 = Grantee(prn)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Grantee(prn)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new GranteeList(n0, n1); }
}

TableListForGrant TableListForGrant(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  Identifier n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Identifier n9 = null;
}
{
  (
    n2 = < STAR_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(2); }
    n4 = Identifier(prn)
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = Identifier(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new TableListForGrant(n0); }
}

Privilege Privilege(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  (
    n2 = < SELECT_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 7); }
  |
    n4 = < INSERT_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 7); }
  |
    n6 = < UPDATE_ >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 7); }
  |
    n8 = < DELETE_ >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 7); }
  |
    n10 = < REFERENCES_ >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 7); }
  |
    n12 = < INDEX_ >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 7); }
  |
    n14 = < ALTER_ >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 7); }
  )
  { return new Privilege(n0); }
}

PrivilegeList PrivilegeList(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  Privilege n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Privilege n9 = null;
}
{
  (
    n2 = < ALL_ >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(2); }
    n4 = Privilege(prn)
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = Privilege(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new PrivilegeList(n0); }
}

Grant Grant(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrivilegeList n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeToken n6 = null;
  Token n7 = null;
  TableListForGrant n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  GranteeList n11 = null;
}
{
  n1 = < GRANT_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = PrivilegeList(prn)
  n4 = < ON_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  [
    n7 = < TABLE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
  ]
  n8 = TableListForGrant(prn)
  n10 = < TO_ >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n11 = GranteeList(prn)
  { return new Grant(n0, n2, n3, n5, n8, n9, n11); }
}

Revoke Revoke(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrivilegeList n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeToken n6 = null;
  Token n7 = null;
  TableListForGrant n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  GranteeList n11 = null;
}
{
  n1 = < REVOKE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = PrivilegeList(prn)
  n4 = < ON_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  [
    n7 = < TABLE_ >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
  ]
  n8 = TableListForGrant(prn)
  n10 = < FROM_ >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n11 = GranteeList(prn)
  { return new Revoke(n0, n2, n3, n5, n8, n9, n11); }
}

Cluster Cluster(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  Identifier n4 = null;
  NodeOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Identifier n9 = null;
}
{
  n1 = < CLUSTER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n5 = new NodeOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = Identifier(prn)
    { n3.addNode(n4); }
    [
      { n6 = new NodeSequence(2); }
      n8 = < ON_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = Identifier(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    ]
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  { return new Cluster(n0, n2); }
}

Truncate Truncate(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  TableName n5 = null;
}
{
  n1 = < TRUNCATE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n4 = < TABLE_ >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  ]
  n5 = TableName(prn)
  { return new Truncate(n0, n2, n5); }
}

Kill Kill(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  n1 = < KILL_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new Kill(n0, n2); }
}

Unlisten Unlisten(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  Identifier n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < UNLISTEN_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    (
      n4 = Identifier(prn)
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n6 = < STAR_ >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3 = new NodeChoice(n5, 1, 2); }
    )
    { n2.addNode(n3); }
  ]
  { return new Unlisten(n0, n2); }
}

DeclareCursor DeclareCursor(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Select n7 = null;
}
{
  n1 = < DECLARE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier(prn)
  n4 = < CURSOR_ >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = < FOR_ >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Select(prn)
  { return new DeclareCursor(n0, n2, n3, n5, n7); }
}

CloseCursor CloseCursor(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < CLOSE_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n3 = Identifier(prn)
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n5 = < ALL_ >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n2 = new NodeChoice(n4, 1, 2); }
    )
    
  )
  { return new CloseCursor(n0, n2); }
}

FetchCursor FetchCursor(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Identifier n6 = null;
}
{
  n1 = < FETCH_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT_LITERAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < FROM_ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Identifier(prn)
  { return new FetchCursor(n0, n2, n4, n6); }
}

AlterCluster AlterCluster(PrintStream prn) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = < ALTER_ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < CLUSTER_ >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < SET_ >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    (
      n8 = < READ_ONLY_ >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6 = new NodeChoice(n7, 0, 2); }
    |
      n10 = < READ_WRITE_ >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6 = new NodeChoice(n9, 1, 2); }
    )
    
  )
  { return new AlterCluster(n0, n2, n4, n6); }
}
